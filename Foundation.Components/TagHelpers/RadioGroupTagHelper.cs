using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Foundation.Common.Utilities;
using Foundation.Components.Enums;
using Foundation.Components.Models;
using Microsoft.AspNetCore.Razor.TagHelpers;

namespace Foundation.Components.TagHelpers
{
    /// <summary>
    /// Gets or sets the name of the radio group. This name is used to group the radio buttons and associate them together.
    /// </summary>
    [HtmlTargetElement("gcds-radio-group")]
    public class RadioGroupTagHelper: BaseTagHelper
    {
        /// <summary>
        /// Gets or sets the name of the radio group. This name is used to group the radio buttons and associate them together.
        /// </summary>
        public required string Name { get; set; }

        /// <summary>
        /// Gets or sets the collection of radio options available in the radio group.
        /// Each option is represented by a <see cref="RadioOption"/> object that defines the radio button's value and label.
        /// </summary>
        public required IEnumerable<RadioOption> Options { get; set; }

        /// <summary>
        /// Processes the <c>gcds-radio-group</c> element by adding the <c>name</c>, <c>lang</c>, and <c>options</c> attributes to the rendered output.
        /// The <c>options</c> attribute contains a serialized JSON representation of the available radio options.
        /// </summary>
        /// <param name="context">The context for the tag helper.</param>
        /// <param name="output">The HTML element output generated by the tag helper.</param>
        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            AddAttributeIfNotNull(output, "name", Name);
            AddAttributeIfNotNull(output, "lang", Lang);


            string optionJson = JsonSerializer.Serialize(
                Options,
                JsonOptionsUtility.CamelCase
            );
            output.Attributes.SetAttribute("options", optionJson);


            base.Process(context, output);
        }
    }
}
