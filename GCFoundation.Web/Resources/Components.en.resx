<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GcdsHeading" xml:space="preserve">
    <value>GC Design System Components</value>
  </data>
  <data name="GcdsParagraph1" xml:space="preserve">
    <value>All GC Design System components are compatible out of the box. Just make sure the library is configured to point to the latest version. If the version was recently updated, you may not yet see autocomplete suggestions in Foundation.</value>
  </data>
  <data name="GcdsLinkText" xml:space="preserve">
    <value>Find all components in the
&lt;gcds-link href="https://design-system.alpha.canada.ca/en/components/" target="_blank" external&gt;
 GC Design System documentation
&lt;/gcds-link&gt;.</value>
  </data>
  <data name="GcdsParagraph2" xml:space="preserve">
    <value>To use GC Design System components, you’ll need to use the Web Component code. The components should also appear in Visual Studio if they have been implemented. However, even if a component doesn't appear in IntelliSense, you can still use it—just make sure you’re referencing the correct version of the GC Design System.</value>
  </data>
  <data name="Badges_Title" xml:space="preserve">
    <value>FDCP Badge Documentation</value>
  </data>
  <data name="Badges_Overview_Title" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="Badges_Overview_Text" xml:space="preserve">
    <value>The &lt;code&gt;&amp;lt;fdcp-badge&amp;gt;&lt;/code&gt; component is used to highlight small pieces of information...</value>
  </data>
  <data name="Badges_Solid_Title" xml:space="preserve">
    <value>Solid Variants</value>
  </data>
  <data name="Badges_Solid_Text" xml:space="preserve">
    <value>These badges use a solid background.</value>
  </data>
  <data name="Badges_Inverted_Title" xml:space="preserve">
    <value>Inverted Variants</value>
  </data>
  <data name="Badges_Inverted_Text" xml:space="preserve">
    <value>Use the &lt;code&gt;inverted="true"&lt;/code&gt; attribute to render badges with transparent backgrounds.</value>
  </data>
  <data name="Badges_Slot_Title" xml:space="preserve">
    <value>Start and End</value>
  </data>
  <data name="Badges_Slot_Text" xml:space="preserve">
    <value>You can insert an icon or button at the start or end using either the &lt;code&gt;slot&lt;/code&gt; attribute or the &lt;code&gt;StartContent&lt;/code&gt;/&lt;code&gt;EndContent&lt;/code&gt; properties.</value>
  </data>
  <data name="Badges_Dismissible_Title" xml:space="preserve">
    <value>Dismissible Badge</value>
  </data>
  <data name="Badges_Parameters_Title" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="Badges_Parameters_Style" xml:space="preserve">
    <value>Badge style (Primary, Success, Danger, Info, etc.)</value>
  </data>
  <data name="Badges_Parameters_Inverted" xml:space="preserve">
    <value>Applies an inverted, outline-style badge.</value>
  </data>
  <data name="Badges_Parameters_StartContent" xml:space="preserve">
    <value>Optional HTML to prepend before the badge content.</value>
  </data>
  <data name="Badges_Parameters_EndContent" xml:space="preserve">
    <value>Optional HTML to append after the badge content.</value>
  </data>
  <data name="Badges_Parameters_TagId" xml:space="preserve">
    <value>Optional &lt;code&gt;id&lt;/code&gt; attribute for the badge element.</value>
  </data>
  <data name="Badges_Notes_Title" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="Badges_Notes_1" xml:space="preserve">
    <value>Use &lt;code&gt;slot="start-content"&lt;/code&gt; and &lt;code&gt;slot="end-content"&lt;/code&gt; when embedding HTML.</value>
  </data>
  <data name="Badges_Notes_2" xml:space="preserve">
    <value>For font icons, use libraries like Font Awesome or Bootstrap Icons.</value>
  </data>
  <data name="Badges_Notes_3" xml:space="preserve">
    <value>All badges are rendered as &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements with class &lt;code&gt;fdcp-badge&lt;/code&gt;.</value>
  </data>
  <data name="Badges_Inverted_Anchor" xml:space="preserve">
    <value>inverted</value>
  </data>
  <data name="Badges_Overview_Anchor" xml:space="preserve">
    <value>overview</value>
  </data>
  <data name="Badges_Solid_Anchor" xml:space="preserve">
    <value>solid</value>
  </data>
  <data name="Badges_Slot_Anchor" xml:space="preserve">
    <value>start-end</value>
  </data>
  <data name="Badges_Parameters_Anchor" xml:space="preserve">
    <value>parameters</value>
  </data>
  <data name="Badges_Notes_Anchor" xml:space="preserve">
    <value>notes</value>
  </data>
  <data name="GlobalResources_Title" xml:space="preserve">
    <value>Global Resources Configuration</value>
  </data>
  <data name="GlobalResources_Description" xml:space="preserve">
    <value>This page demonstrates how to use the new global resources configuration feature in GCFoundation. You can configure CSS, JavaScript, meta tags, and link tags globally through the appsettings.json file.</value>
  </data>
  <data name="GlobalResources_CurrentConfiguration_Title" xml:space="preserve">
    <value>Current Configuration</value>
  </data>
  <data name="GlobalResources_CurrentConfiguration_Description" xml:space="preserve">
    <value>The following resources are currently configured to be loaded globally:</value>
  </data>
  <data name="GlobalResources_GlobalCssFiles_Title" xml:space="preserve">
    <value>Global CSS Files</value>
  </data>
  <data name="GlobalResources_GlobalJavaScriptFiles_Title" xml:space="preserve">
    <value>Global JavaScript Files</value>
  </data>
  <data name="GlobalResources_GlobalMetaTags_Title" xml:space="preserve">
    <value>Global Meta Tags</value>
  </data>
  <data name="GlobalResources_GlobalLinkTags_Title" xml:space="preserve">
    <value>Global Link Tags</value>
  </data>
  <data name="GlobalResources_NoCssFiles" xml:space="preserve">
    <value>No global CSS files configured.</value>
  </data>
  <data name="GlobalResources_NoJavaScriptFiles" xml:space="preserve">
    <value>No global JavaScript files configured.</value>
  </data>
  <data name="GlobalResources_NoMetaTags" xml:space="preserve">
    <value>No global meta tags configured.</value>
  </data>
  <data name="GlobalResources_NoLinkTags" xml:space="preserve">
    <value>No global link tags configured.</value>
  </data>
  <data name="GlobalResources_ResourceInclusion_Title" xml:space="preserve">
    <value>Resource Inclusion Settings</value>
  </data>
  <data name="GlobalResources_ResourceInclusion_Description" xml:space="preserve">
    <value>The following settings control which optional resources are included:</value>
  </data>
  <data name="GlobalResources_DefaultCss_Label" xml:space="preserve">
    <value>Default CSS:</value>
  </data>
  <data name="GlobalResources_DefaultJavaScript_Label" xml:space="preserve">
    <value>Default JavaScript:</value>
  </data>
  <data name="GlobalResources_GCDSResources_Label" xml:space="preserve">
    <value>GCDS Resources:</value>
  </data>
  <data name="GlobalResources_FontAwesome_Label" xml:space="preserve">
    <value>Font Awesome:</value>
  </data>
  <data name="GlobalResources_AlwaysEnabled" xml:space="preserve">
    <value>Always Enabled</value>
  </data>
  <data name="GlobalResources_Enabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="GlobalResources_Disabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="GlobalResources_DefaultFilesNote" xml:space="preserve">
    <value>Note: Default foundation CSS and JavaScript files are always included and cannot be disabled. This ensures that all GCFoundation components work properly on every page.</value>
  </data>
  <data name="GlobalResources_LoadingOrder_Title" xml:space="preserve">
    <value>Resource Loading Order</value>
  </data>
  <data name="GlobalResources_LoadingOrder_Description" xml:space="preserve">
    <value>Resources are loaded in the following order:</value>
  </data>
  <data name="GlobalResources_CssLoadingOrder_Title" xml:space="preserve">
    <value>CSS Loading Order</value>
  </data>
  <data name="GlobalResources_JavaScriptLoadingOrder_Title" xml:space="preserve">
    <value>JavaScript Loading Order</value>
  </data>
  <data name="GlobalResources_HowToConfigure_Title" xml:space="preserve">
    <value>How to Configure</value>
  </data>
  <data name="GlobalResources_HowToConfigure_Description" xml:space="preserve">
    <value>To configure global resources, update your appsettings.json file:</value>
  </data>
  <data name="GlobalResources_UsingHelper_Title" xml:space="preserve">
    <value>Using GlobalResourceHelper in Views</value>
  </data>
  <data name="GlobalResources_UsingHelper_Description" xml:space="preserve">
    <value>You can also use the GlobalResourceHelper in your Razor views for more control:</value>
  </data>
  <data name="UserLogin_AuthStatus_Title" xml:space="preserve">
    <value>Current Authentication Status</value>
  </data>
  <data name="UserLogin_Authenticated_Message" xml:space="preserve">
    <value>You are currently logged in as {0}</value>
  </data>
  <data name="UserLogin_NotAuthenticated_Message" xml:space="preserve">
    <value>You are not currently logged in. Use the simulate login button below to test the authenticated state.</value>
  </data>
  <data name="UserLogin_SimulateLogin" xml:space="preserve">
    <value>Simulate Login</value>
  </data>
  <data name="UserLogin_SimulateLogout" xml:space="preserve">
    <value>Simulate Logout</value>
  </data>
  <data name="UserLogin_ApiTest_Message" xml:space="preserve">
    <value>See how to integrate with APIs to get user information.</value>
  </data>
  <data name="UserLogin_ApiTest_Link" xml:space="preserve">
    <value>API test</value>
  </data>
  <data name="UserLogin_PageTitle" xml:space="preserve">
    <value>User Login Partial Examples</value>
  </data>
  <data name="UserLogin_Component_Title" xml:space="preserve">
    <value>User Login Partial Component</value>
  </data>
  <data name="UserLogin_Position_PageTitle" xml:space="preserve">
    <value>User Login in {0} Position</value>
  </data>
  <data name="UserLogin_PageDescription" xml:space="preserve">
    <value>This page demonstrates the configurable User Login partial component with English and French localization support. The partial can be customized through configuration settings and displays different information based on authentication status.</value>
  </data>
  <data name="UserLogin_TestAuthStates" xml:space="preserve">
    <value>Test the login partial with different authentication states.</value>
  </data>
  <data name="UserLogin_ConfigurationOptions" xml:space="preserve">
    <value>Configuration Options</value>
  </data>
  <data name="UserLogin_ConfigDescription" xml:space="preserve">
    <value>The User Login partial supports the following configuration options through appsettings.json:</value>
  </data>
  <data name="UserLogin_Features" xml:space="preserve">
    <value>Features</value>
  </data>
  <data name="UserLogin_Feature_Bilingual" xml:space="preserve">
    <value>Fully bilingual (English/French) with automatic language detection</value>
  </data>
  <data name="UserLogin_Feature_Configurable" xml:space="preserve">
    <value>Configurable display options (show/hide various user information)</value>
  </data>
  <data name="UserLogin_Feature_CompactFull" xml:space="preserve">
    <value>Compact and full display modes</value>
  </data>
  <data name="UserLogin_Feature_SessionTimeout" xml:space="preserve">
    <value>Session timeout warnings and countdown</value>
  </data>
  <data name="UserLogin_Feature_Avatar" xml:space="preserve">
    <value>User avatar support with automatic initials generation</value>
  </data>
  <data name="UserLogin_Feature_GCDS" xml:space="preserve">
    <value>GCDS component integration for consistent Government of Canada styling</value>
  </data>
  <data name="UserLogin_Feature_Responsive" xml:space="preserve">
    <value>Responsive design for mobile and desktop</value>
  </data>
  <data name="UserLogin_Feature_Accessibility" xml:space="preserve">
    <value>Accessibility features with proper ARIA labels</value>
  </data>
  <data name="UserLogin_Feature_Integration" xml:space="preserve">
    <value>Easy integration with existing authentication systems</value>
  </data>
  <data name="UserLogin_Position_Description" xml:space="preserve">
    <value>This example shows how the User Login partial can be positioned in different areas of your application.</value>
  </data>
  <data name="UserLogin_Position_Header_Alert" xml:space="preserve">
    <value>The login partial is displayed in the header area (above this content).</value>
  </data>
  <data name="UserLogin_Position_Sidebar_Title" xml:space="preserve">
    <value>Sidebar Login</value>
  </data>
  <data name="UserLogin_Position_Sidebar_Content" xml:space="preserve">
    <value>This is the main content area. The login partial is displayed in the sidebar to the left (on desktop) or above (on mobile).</value>
  </data>
  <data name="UserLogin_Position_Inline_Title" xml:space="preserve">
    <value>Inline Login Information</value>
  </data>
  <data name="UserLogin_Position_Content_Before" xml:space="preserve">
    <value>This is content before the login partial.</value>
  </data>
  <data name="UserLogin_Position_Content_After" xml:space="preserve">
    <value>This is content after the login partial.</value>
  </data>
  <data name="UserLogin_Position_Footer_Title" xml:space="preserve">
    <value>Footer Login</value>
  </data>
  <data name="UserLogin_Position_Footer_Content" xml:space="preserve">
    <value>The main content area. The login partial will be displayed in the footer area (below this content).</value>
  </data>
  <data name="UserLogin_Position_BackToExamples" xml:space="preserve">
    <value>← Back to Examples</value>
  </data>
  <data name="UserLogin_Component_Description" xml:space="preserve">
    <value>A configurable, bilingual user login information component that displays authentication status, user details, and session information. Perfect for Azure cloud deployments with stateless authentication.</value>
  </data>
  <data name="UserLogin_LiveExamples" xml:space="preserve">
    <value>Live Examples</value>
  </data>
  <data name="UserLogin_LiveExamples_Description" xml:space="preserve">
    <value>Below are working examples of the User Login Partial in different configurations:</value>
  </data>
  <data name="UserLogin_CurrentUserState" xml:space="preserve">
    <value>Live Example - Current User State</value>
  </data>
  <data name="UserLogin_CurrentUserState_Description" xml:space="preserve">
    <value>This shows the actual authentication state from the current user context.</value>
  </data>
  <data name="UserLogin_CurrentlyAuthenticated" xml:space="preserve">
    <value />
  </data>
  <data name="UserLogin_CurrentlyNotAuthenticated" xml:space="preserve">
    <value />
  </data>
  <data name="UserLogin_SimulateLoginNote" xml:space="preserve">
    <value>Use the "Simulate Login" button in the Examples section to see the authenticated state.</value>
  </data>
  <data name="UserLogin_DefaultMode" xml:space="preserve">
    <value>Default Mode</value>
  </data>
  <data name="UserLogin_DefaultMode_Description" xml:space="preserve">
    <value>Standard full display mode with user information.</value>
  </data>
  <data name="UserLogin_SessionExpiring" xml:space="preserve">
    <value>Session Expiring Soon</value>
  </data>
  <data name="UserLogin_SessionExpiring_Description" xml:space="preserve">
    <value>Example showing session timeout warning.</value>
  </data>
  <data name="UserLogin_NotAuthenticatedState" xml:space="preserve">
    <value>Not Authenticated State</value>
  </data>
  <data name="UserLogin_NotAuthenticatedState_Description" xml:space="preserve">
    <value>Display for users who are not logged in.</value>
  </data>
  <data name="UserLogin_ConfigOptions_Description" xml:space="preserve">
    <value>The User Login Partial is highly configurable through appsettings.json and supports both stateless and session-based authentication systems.</value>
  </data>
  <data name="UserLogin_KeyFeatures" xml:space="preserve">
    <value>Key Features</value>
  </data>
  <data name="UserLogin_BilingualSupport" xml:space="preserve">
    <value>🌐 Bilingual Support</value>
  </data>
  <data name="UserLogin_BilingualSupport_Description" xml:space="preserve">
    <value>Automatic English/French localization with resource files and culture detection.</value>
  </data>
  <data name="UserLogin_CloudReady" xml:space="preserve">
    <value>☁️ Cloud Ready</value>
  </data>
  <data name="UserLogin_CloudReady_Description" xml:space="preserve">
    <value>Stateless authentication support perfect for Azure App Service and container deployments.</value>
  </data>
  <data name="UserLogin_Configurable" xml:space="preserve">
    <value>🔧 Configurable</value>
  </data>
  <data name="UserLogin_Configurable_Description" xml:space="preserve">
    <value>15+ configuration options to customize display and behavior for your needs.</value>
  </data>
  <data name="UserLogin_Responsive" xml:space="preserve">
    <value>📱 Responsive</value>
  </data>
  <data name="UserLogin_Responsive_Description" xml:space="preserve">
    <value>Mobile-first design that works perfectly on all device sizes.</value>
  </data>
  <data name="UserLogin_GCDSStyled" xml:space="preserve">
    <value>🎨 GCDS Styled</value>
  </data>
  <data name="UserLogin_GCDSStyled_Description" xml:space="preserve">
    <value>Uses Government of Canada Design System components for consistent styling.</value>
  </data>
  <data name="UserLogin_Accessible" xml:space="preserve">
    <value>♿ Accessible</value>
  </data>
  <data name="UserLogin_Accessible_Description" xml:space="preserve">
    <value>WCAG compliant with proper ARIA labels and semantic markup.</value>
  </data>
  <data name="UserLogin_SupportedAuthMethods" xml:space="preserve">
    <value>Supported Authentication Methods</value>
  </data>
  <data name="UserLogin_SupportedAuthMethods_Description" xml:space="preserve">
    <value>The component automatically extracts user information from claims, making it compatible with various authentication systems:</value>
  </data>
  <data name="UserLogin_CookieAuth" xml:space="preserve">
    <value>Cookie Authentication</value>
  </data>
  <data name="UserLogin_CookieAuth_Description" xml:space="preserve">
    <value>Stateless cookie-based auth without server-side sessions. Perfect for Azure cloud deployments.</value>
  </data>
  <data name="UserLogin_CookieAuth_Benefits" xml:space="preserve">
    <value />
  </data>
  <data name="UserLogin_AzureAD" xml:space="preserve">
    <value>Azure Active Directory</value>
  </data>
  <data name="UserLogin_AzureAD_Description" xml:space="preserve">
    <value>Enterprise authentication with Office 365 integration and single sign-on support.</value>
  </data>
  <data name="UserLogin_AzureAD_Benefits" xml:space="preserve">
    <value />
  </data>
  <data name="UserLogin_JWTTokens" xml:space="preserve">
    <value>JWT Tokens</value>
  </data>
  <data name="UserLogin_JWTTokens_Description" xml:space="preserve">
    <value>JSON Web Token authentication for API-first applications and microservices.</value>
  </data>
  <data name="UserLogin_JWTTokens_Benefits" xml:space="preserve">
    <value />
  </data>
  <data name="UserLogin_ExternalProviders" xml:space="preserve">
    <value>External Providers</value>
  </data>
  <data name="UserLogin_ExternalProviders_Description" xml:space="preserve">
    <value>OAuth integration with Google, GitHub, Microsoft, and other external providers.</value>
  </data>
  <data name="UserLogin_ExternalProviders_Benefits" xml:space="preserve">
    <value />
  </data>
  <data name="UserLogin_AdditionalResources" xml:space="preserve">
    <value>Additional Resources</value>
  </data>
  <data name="UserLogin_CompleteExamples" xml:space="preserve">
    <value>Complete Examples</value>
  </data>
  <data name="UserLogin_CompleteExamples_Description" xml:space="preserve">
    <value>Interactive examples with different configurations and use cases.</value>
  </data>
  <data name="UserLogin_StatelessAuth" xml:space="preserve">
    <value>Stateless Authentication</value>
  </data>
  <data name="UserLogin_StatelessAuth_Description" xml:space="preserve">
    <value>Azure cloud-ready authentication examples without sessions.</value>
  </data>
  <data name="UserLogin_TemplateIntegration" xml:space="preserve">
    <value>Template Integration</value>
  </data>
  <data name="UserLogin_TemplateIntegration_Description" xml:space="preserve">
    <value>Learn how to integrate the partial into your layout templates.</value>
  </data>
  <data name="UserLogin_QuickImplementation" xml:space="preserve">
    <value>Quick Implementation Guide</value>
  </data>
  <data name="UserLogin_Step_ConfigureSettings" xml:space="preserve">
    <value />
  </data>
  <data name="UserLogin_Step_RegisterServices" xml:space="preserve">
    <value />
  </data>
  <data name="UserLogin_Step_SetInController" xml:space="preserve">
    <value />
  </data>
  <data name="UserLogin_Step_ConfigureAuth" xml:space="preserve">
    <value />
  </data>
  <data name="UserLogin_Step_CustomizeAppearance" xml:space="preserve">
    <value />
  </data>
  <data name="Cards_Title" xml:space="preserve">
    <value>FDCP Card Documentation</value>
  </data>
  <data name="Cards_Overview_Title" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="Cards_Overview_Anchor" xml:space="preserve">
    <value>overview</value>
  </data>
  <data name="Cards_Basic_Title" xml:space="preserve">
    <value>Basic Card</value>
  </data>
  <data name="Cards_Basic_Anchor" xml:space="preserve">
    <value>basic</value>
  </data>
  <data name="Cards_WithSlots_Title" xml:space="preserve">
    <value>Cards with Header and Footer</value>
  </data>
  <data name="Cards_WithSlots_Anchor" xml:space="preserve">
    <value>slots</value>
  </data>
  <data name="Cards_WithImages_Title" xml:space="preserve">
    <value>Cards with Images</value>
  </data>
  <data name="Cards_WithImages_Anchor" xml:space="preserve">
    <value>images</value>
  </data>
  <data name="Cards_Horizontal_Title" xml:space="preserve">
    <value>Horizontal Cards</value>
  </data>
  <data name="Cards_Horizontal_Anchor" xml:space="preserve">
    <value>horizontal</value>
  </data>
  <data name="Cards_Parameters_Title" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="Cards_Parameters_Anchor" xml:space="preserve">
    <value>parameters</value>
  </data>
  <data name="Cards_Notes_Title" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="Cards_Notes_Anchor" xml:space="preserve">
    <value>notes</value>
  </data>
  <data name="Cards_Overview_Text" xml:space="preserve">
    <value>The &lt;code&gt;&amp;lt;fdcp-card&amp;gt;&lt;/code&gt; component provides a flexible and extensible content container inspired by Bootstrap cards, designed with Government of Canada Design System (GCDS) styling. It includes options for headers, footers, images, and various contextual background colors.</value>
  </data>
  <data name="Cards_Basic_Text" xml:space="preserve">
    <value>A basic card with mixed content and flexible width.</value>
  </data>
  <data name="Cards_WithSlots_Text" xml:space="preserve">
    <value>Use the &lt;code&gt;slot&lt;/code&gt; attribute to define header, body, and footer sections.</value>
  </data>
  <data name="Cards_WithImages_Text" xml:space="preserve">
    <value>Cards support top and bottom images using the &lt;code&gt;image-top&lt;/code&gt; and &lt;code&gt;image-bottom&lt;/code&gt; attributes.</value>
  </data>
  <data name="Cards_Horizontal_Text" xml:space="preserve">
    <value>Use the &lt;code&gt;horizontal="true"&lt;/code&gt; attribute to create horizontal card layouts.</value>
  </data>
  <data name="Cards_Parameters_TagId" xml:space="preserve">
    <value>Optional &lt;code&gt;id&lt;/code&gt; attribute for the card element.</value>
  </data>
  <data name="Cards_Parameters_Width" xml:space="preserve">
    <value>Sets the width of the card using CSS value (e.g., "18rem", "300px", "100%").</value>
  </data>
  <data name="Cards_Parameters_Height" xml:space="preserve">
    <value>Sets the height of the card using CSS value (e.g., "200px", "auto", "100%").</value>
  </data>
  <data name="Cards_Parameters_Border" xml:space="preserve">
    <value>Whether the card should have a border. Default is true.</value>
  </data>
  <data name="Cards_Parameters_Shadow" xml:space="preserve">
    <value>Whether the card should have a shadow. Default is false.</value>
  </data>
  <data name="Cards_Parameters_ImageTop" xml:space="preserve">
    <value>URL for the card image that appears at the top.</value>
  </data>
  <data name="Cards_Parameters_ImageBottom" xml:space="preserve">
    <value>URL for the card image that appears at the bottom.</value>
  </data>
  <data name="Cards_Parameters_ImageAlt" xml:space="preserve">
    <value>Alt text for the card images.</value>
  </data>
  <data name="Cards_Parameters_Horizontal" xml:space="preserve">
    <value>Whether the card should use horizontal layout. Default is false.</value>
  </data>
  <data name="Cards_Notes_1" xml:space="preserve">
    <value>Use &lt;code&gt;slot="header"&lt;/code&gt;, &lt;code&gt;slot="body"&lt;/code&gt;, and &lt;code&gt;slot="footer"&lt;/code&gt; to define card sections.</value>
  </data>
  <data name="Cards_Notes_2" xml:space="preserve">
    <value>Cards are responsive and will adapt to their container width unless a specific width is set.</value>
  </data>
  <data name="Cards_Notes_3" xml:space="preserve">
    <value>All cards use GCDS color variables for consistent Government of Canada styling.</value>
  </data>
  <data name="StatelessAuth_Demo_Title" xml:space="preserve">
    <value>Stateless Authentication Demo</value>
  </data>
  <data name="StatelessAuth_Demo_Description" xml:space="preserve">
    <value>Try the cookie authentication below and see how the User Login Partial updates automatically.</value>
  </data>
  <data name="StatelessAuth_Authenticated_Message" xml:space="preserve">
    <value />
  </data>
  <data name="StatelessAuth_CurrentStatus_Title" xml:space="preserve">
    <value>Current Authentication Status</value>
  </data>
  <data name="StatelessAuth_Authenticated_Description" xml:space="preserve">
    <value>The User Login Partial above shows your current session information from claims (no server-side session storage).</value>
  </data>
  <data name="StatelessAuth_NotAuthenticated_Message" xml:space="preserve">
    <value />
  </data>
  <data name="StatelessAuth_NotAuthenticated_Description" xml:space="preserve">
    <value>Notice how the User Login Partial will update automatically after login.</value>
  </data>
  <data name="StatelessAuth_CookieDemo_Title" xml:space="preserve">
    <value>Cookie Authentication Demo</value>
  </data>
  <data name="StatelessAuth_CookieDemo_Description" xml:space="preserve">
    <value>Test cookie-based authentication without server sessions. All user data comes from claims in the authentication cookie.</value>
  </data>
  <data name="StatelessAuth_LoggedIn_Text" xml:space="preserve">
    <value>You're logged in! Click logout to clear the authentication cookie.</value>
  </data>
  <data name="StatelessAuth_LoggedOut_Text" xml:space="preserve">
    <value>This will create an authentication cookie with user claims (no session storage).</value>
  </data>
  <data name="StatelessAuth_Login_Button" xml:space="preserve">
    <value>🔐 Login with Cookie Auth</value>
  </data>
  <data name="StatelessAuth_Logout_Button" xml:space="preserve">
    <value>🚪 Logout</value>
  </data>
  <data name="StatelessAuth_TechnicalInfo_Title" xml:space="preserve">
    <value>Technical Information</value>
  </data>
  <data name="StatelessAuth_HowItWorks" xml:space="preserve">
    <value />
  </data>
  <data name="StatelessAuth_Benefit_Claims" xml:space="preserve">
    <value>✅ Claims stored in authentication cookie</value>
  </data>
  <data name="StatelessAuth_Benefit_NoSessions" xml:space="preserve">
    <value>✅ No server-side session storage required</value>
  </data>
  <data name="StatelessAuth_Benefit_Azure" xml:space="preserve">
    <value>✅ Scales automatically in Azure cloud</value>
  </data>
  <data name="StatelessAuth_Benefit_LoadBalanced" xml:space="preserve">
    <value>✅ Works across load-balanced servers</value>
  </data>
  <data name="StatelessAuth_ViewClaims_Button" xml:space="preserve">
    <value>📊 View Current Claims</value>
  </data>
  <data name="StatelessAuth_CheckAuth_Button" xml:space="preserve">
    <value>⚡ Check Auth Status</value>
  </data>
  <data name="StatelessAuth_DemoResults_Title" xml:space="preserve">
    <value>Demo Results</value>
  </data>
  <data name="StatelessAuth_Methods_Title" xml:space="preserve">
    <value>Available Stateless Authentication Methods</value>
  </data>
  <data name="StatelessAuth_Methods_Description" xml:space="preserve">
    <value>The GC Foundation supports multiple stateless authentication approaches for Azure cloud deployment:</value>
  </data>
  <data name="StatelessAuth_CookieAuth_Title" xml:space="preserve">
    <value>🍪 Cookie Authentication</value>
  </data>
  <data name="StatelessAuth_CookieAuth_Description" xml:space="preserve">
    <value>Uses authentication cookies with claims (no server sessions). ✅ Recommended for most web apps.</value>
  </data>
  <data name="StatelessAuth_CookieAuth_Benefit1" xml:space="preserve">
    <value>No server-side storage required</value>
  </data>
  <data name="StatelessAuth_CookieAuth_Benefit2" xml:space="preserve">
    <value>Scales automatically in Azure</value>
  </data>
  <data name="StatelessAuth_CookieAuth_Benefit3" xml:space="preserve">
    <value>Works across load-balanced servers</value>
  </data>
  <data name="StatelessAuth_AzureAD_Title" xml:space="preserve">
    <value>🏢 Azure AD Integration</value>
  </data>
  <data name="StatelessAuth_AzureAD_Description" xml:space="preserve">
    <value>Enterprise authentication with Microsoft identity platform. Perfect for government applications.</value>
  </data>
  <data name="StatelessAuth_AzureAD_Benefit1" xml:space="preserve">
    <value>Single sign-on (SSO)</value>
  </data>
  <data name="StatelessAuth_AzureAD_Benefit2" xml:space="preserve">
    <value>Multi-factor authentication</value>
  </data>
  <data name="StatelessAuth_AzureAD_Benefit3" xml:space="preserve">
    <value>Office 365 integration</value>
  </data>
  <data name="StatelessAuth_JWT_Title" xml:space="preserve">
    <value>🔑 JWT Tokens</value>
  </data>
  <data name="StatelessAuth_JWT_Description" xml:space="preserve">
    <value>Stateless API authentication using JSON Web Tokens. Ideal for microservices and APIs.</value>
  </data>
  <data name="StatelessAuth_JWT_Benefit1" xml:space="preserve">
    <value>Completely stateless</value>
  </data>
  <data name="StatelessAuth_JWT_Benefit2" xml:space="preserve">
    <value>Cross-platform compatibility</value>
  </data>
  <data name="StatelessAuth_JWT_Benefit3" xml:space="preserve">
    <value>Can be verified independently</value>
  </data>
  <data name="StatelessAuth_OAuth_Title" xml:space="preserve">
    <value>🌐 OAuth Providers</value>
  </data>
  <data name="StatelessAuth_OAuth_Description" xml:space="preserve">
    <value>External authentication providers (Google, GitHub, etc.). Good for public-facing applications.</value>
  </data>
  <data name="StatelessAuth_OAuth_Benefit1" xml:space="preserve">
    <value>No credential management</value>
  </data>
  <data name="StatelessAuth_OAuth_Benefit2" xml:space="preserve">
    <value>User convenience</value>
  </data>
  <data name="StatelessAuth_OAuth_Benefit3" xml:space="preserve">
    <value>Social login options</value>
  </data>
  <data name="StatelessAuth_Integration_Title" xml:space="preserve">
    <value>💡 Integration with User Login Partial</value>
  </data>
  <data name="StatelessAuth_Integration_Description1" xml:space="preserve">
    <value />
  </data>
  <data name="StatelessAuth_Integration_Description2" xml:space="preserve">
    <value />
  </data>
  <data name="Index_Forms_Title" xml:space="preserve">
    <value>Forms</value>
  </data>
  <data name="Index_Forms_Description" xml:space="preserve">
    <value>A way to create forms</value>
  </data>
  <data name="Index_Table_Title" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="Index_Table_Description" xml:space="preserve">
    <value>A way to display information in a table</value>
  </data>
  <data name="Index_Modal_Title" xml:space="preserve">
    <value>Modal</value>
  </data>
  <data name="Index_Modal_Description" xml:space="preserve">
    <value>A way to display information in a popup box (modal)</value>
  </data>
  <data name="Index_FilteredSearch_Title" xml:space="preserve">
    <value>Filtered search</value>
  </data>
  <data name="Index_FilteredSearch_Description" xml:space="preserve">
    <value>A way to display search with filtered result</value>
  </data>
  <data name="Index_Badge_Title" xml:space="preserve">
    <value>Badge</value>
  </data>
  <data name="Index_Badge_Description" xml:space="preserve">
    <value>A way to display tags</value>
  </data>
  <data name="Index_Card_Title" xml:space="preserve">
    <value>Card</value>
  </data>
  <data name="Index_Card_Description" xml:space="preserve">
    <value>Flexible content containers with headers, footers, and images</value>
  </data>
  <data name="Index_PageHeading_Title" xml:space="preserve">
    <value>Page heading</value>
  </data>
  <data name="Index_PageHeading_Description" xml:space="preserve">
    <value>A way to add main heading at the top of the page</value>
  </data>
  <data name="Index_FormBuilder_Title" xml:space="preserve">
    <value>Form builder</value>
  </data>
  <data name="Index_FormBuilder_Description" xml:space="preserve">
    <value>A way to build form automatically from a structure</value>
  </data>
  <data name="Index_Stepper_Title" xml:space="preserve">
    <value>Stepper</value>
  </data>
  <data name="Index_Stepper_Description" xml:space="preserve">
    <value>Create a stepper for a flow or a form</value>
  </data>
  <data name="Index_UserLoginPartial_Title" xml:space="preserve">
    <value>User Login Partial</value>
  </data>
  <data name="Index_UserLoginPartial_Description" xml:space="preserve">
    <value>Configurable user login information display with bilingual support</value>
  </data>
  <data name="Index_Page_Title" xml:space="preserve">
    <value>Components</value>
  </data>
</root>