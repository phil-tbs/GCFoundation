{"version":3,"sources":["components/fdcp-datatable.js","SessionManagement.js"],"names":["debounce","func","wait","timeout","_this","this","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","apply","document","addEventListener","bootstrapModal","reminder","countdownElement","countdownInterval","secondsRemaining","refreshBtn","logoutBtn","sessionModalElement","getElementById","bootstrap","Modal","timer","parseInt","dataset","sessionTimeout","reminderTime","event","CustomEvent","detail","remainingTime","window","dispatchEvent","show","textContent","concat","setInterval","clearInterval","location","href","logoutUrl","querySelector","console","log","fetch","refresh","method","credentials","then","hide","querySelectorAll","forEach","el","config","layout","pagination","paginationSize","columns","height","JSON","parse","e","error","set","data","ajaxurl","ajaxURL","filterMode","sortMode","ajaxConfig","ajaxContentType","paginationMode","Tabulator","tabulatorId","target","table","findTable","value","trim","clearFilter","getColumns","fields","filter","col","getDefinition","map","getField","setFilter","field","type"],"mappings":"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","file":"foundation.min.js","sourcesContent":["document.querySelectorAll('.tabulator-table').forEach(el => {\r\n    const config = {\r\n        layout: el.dataset.layout || \"fitColumns\",\r\n        pagination: true,\r\n        paginationSize: parseInt(el.dataset.paginationSize || \"10\"),\r\n        columns: [],\r\n        height: '100%'\r\n    };\r\n\r\n    // Parse columns\r\n    if (el.dataset.columns) {\r\n        try {\r\n            config.columns = JSON.parse(el.dataset.columns);\r\n        } catch (e) {\r\n            console.error(\"Failed to parse columns:\", e);\r\n        }\r\n    }\r\n\r\n    if (el.dataset.set) {\r\n        config.data = JSON.parse(el.dataset.set);\r\n    } else if (el.dataset.ajaxurl) {\r\n        config.ajaxURL = el.dataset.ajaxurl;\r\n        config.filterMode = \"remote\";\r\n        config.sortMode = \"remote\";\r\n        config.ajaxConfig = \"POST\";\r\n        config.ajaxContentType = \"json\";\r\n        config.paginationMode = \"remote\";\r\n        config.filterMode = \"remote\";\r\n    }\r\n\r\n\r\n    new Tabulator(el, config);\r\n});\r\n\r\ndocument.querySelectorAll('.tabulator-search-input').forEach(el => {\r\n    el.addEventListener(\"input\", debounce(function (e) {\r\n        let tabulatorId = e.target.dataset.tabulatorId;\r\n        let table = Tabulator.findTable(\"#\" + tabulatorId)[0];\r\n        const value = e.target.value.trim();\r\n\r\n        if (!table) return;\r\n\r\n        if (value === \"\") {\r\n            table.clearFilter();\r\n        } else {\r\n            console.log(table.getColumns());\r\n            const fields = table.getColumns()\r\n                .filter(col => {\r\n                    const def = col.getDefinition();\r\n                    return def.filter; // Only fields with headerFilter enabled\r\n                })\r\n                .map(col => col.getField());\r\n\r\n\r\n            table.setFilter(\r\n                fields.map(field => ({ field: field, type: \"like\", value: value }))\r\n            );\r\n        }\r\n    }, 200)); // 200ms debounce\r\n});\r\n\r\nfunction debounce(func, wait) {\r\n    let timeout;\r\n    return function (...args) {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => func.apply(this, args), wait);\r\n    };\r\n}\r\n","document.addEventListener(\"DOMContentLoaded\", () => {\r\n    const sessionModalElement = document.getElementById('session-extend-modal');\r\n\r\n    if (sessionModalElement) {\r\n        const bootstrapModal = new bootstrap.Modal(sessionModalElement);\r\n        const timer = parseInt(sessionModalElement.dataset.sessionTimeout, 10);\r\n        const reminder = parseInt(sessionModalElement.dataset.reminderTime, 10);\r\n\r\n        const countdownElement = document.getElementById('session-countdown');\r\n        const reminderTimeInMs = (timer - reminder) * 60 * 1000;\r\n\r\n        let countdownInterval;\r\n        let secondsRemaining = reminder * 60;\r\n\r\n        const startCountdown = () => {\r\n            if (!countdownElement) return;\r\n\r\n            countdownElement.textContent = `${secondsRemaining}s`;\r\n\r\n            countdownInterval = setInterval(() => {\r\n                secondsRemaining--;\r\n\r\n                if (secondsRemaining <= 0) {\r\n                    clearInterval(countdownInterval);\r\n                    // Automatically log out if time runs out\r\n                    window.location.href = sessionModalElement.dataset.logoutUrl;\r\n                } else {\r\n                    countdownElement.textContent = `${secondsRemaining}s`;\r\n                }\r\n            }, 1000);\r\n        };\r\n\r\n        setTimeout(() => {\r\n            const event = new CustomEvent(\"foundation:session-reminder\", {\r\n                detail: { remainingTime: reminder * 60 }\r\n            });\r\n            window.dispatchEvent(event);\r\n\r\n            bootstrapModal.show();\r\n            startCountdown();\r\n        }, reminderTimeInMs);\r\n\r\n        const refreshBtn = document.querySelector('[button-id=\"session-extend-refresh-btn\"]');\r\n        const logoutBtn = document.getElementById('[button-id=\"session-extend-logout-btn\"]');\r\n\r\n        if (refreshBtn) {\r\n            refreshBtn.addEventListener(\"click\", () => {\r\n                console.log(\"click\");\r\n                // Send AJAX call to extend session\r\n                fetch(sessionModalElement.dataset.refresh, {\r\n                    method: 'POST',\r\n                    credentials: 'include'\r\n                }).then(() => {\r\n                    bootstrapModal.hide();\r\n                });\r\n            });\r\n        }\r\n\r\n        if (logoutBtn) {\r\n            logoutBtn.addEventListener(\"click\", () => {\r\n                window.location.href = sessionModalElement.dataset.logoutUrl;\r\n            });\r\n        }\r\n    }\r\n});"]}