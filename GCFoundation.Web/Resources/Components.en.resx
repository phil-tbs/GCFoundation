<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GcdsHeading" xml:space="preserve">
    <value>GC Design System Components</value>
  </data>
  <data name="GcdsParagraph1" xml:space="preserve">
    <value>All GC Design System components are compatible out of the box. Just make sure the library is configured to point to the latest version. If the version was recently updated, you may not yet see autocomplete suggestions in Foundation.</value>
  </data>
  <data name="GcdsLinkText" xml:space="preserve">
    <value>Find all components in the
&lt;gcds-link href="https://design-system.alpha.canada.ca/en/components/" target="_blank" external&gt;
 GC Design System documentation
&lt;/gcds-link&gt;.</value>
  </data>
  <data name="GcdsParagraph2" xml:space="preserve">
    <value>To use GC Design System components, you’ll need to use the Web Component code. The components should also appear in Visual Studio if they have been implemented. However, even if a component doesn't appear in IntelliSense, you can still use it—just make sure you’re referencing the correct version of the GC Design System.</value>
  </data>
  <data name="Badges_Title" xml:space="preserve">
    <value>FDCP Badge Documentation</value>
  </data>
  <data name="Badges_Overview_Title" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="Badges_Overview_Text" xml:space="preserve">
    <value>The &lt;code&gt;&amp;lt;fdcp-badge&amp;gt;&lt;/code&gt; component is used to highlight small pieces of information...</value>
  </data>
  <data name="Badges_Solid_Title" xml:space="preserve">
    <value>Solid Variants</value>
  </data>
  <data name="Badges_Solid_Text" xml:space="preserve">
    <value>These badges use a solid background.</value>
  </data>
  <data name="Badges_Inverted_Title" xml:space="preserve">
    <value>Inverted Variants</value>
  </data>
  <data name="Badges_Inverted_Text" xml:space="preserve">
    <value>Use the &lt;code&gt;inverted="true"&lt;/code&gt; attribute to render badges with transparent backgrounds.</value>
  </data>
  <data name="Badges_Slot_Title" xml:space="preserve">
    <value>Start and End</value>
  </data>
  <data name="Badges_Slot_Text" xml:space="preserve">
    <value>You can insert an icon or button at the start or end using either the &lt;code&gt;slot&lt;/code&gt; attribute or the &lt;code&gt;StartContent&lt;/code&gt;/&lt;code&gt;EndContent&lt;/code&gt; properties.</value>
  </data>
  <data name="Badges_Dismissible_Title" xml:space="preserve">
    <value>Dismissible Badge</value>
  </data>
  <data name="Badges_Parameters_Title" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="Badges_Parameters_Style" xml:space="preserve">
    <value>Badge style (Primary, Success, Danger, Info, etc.)</value>
  </data>
  <data name="Badges_Parameters_Inverted" xml:space="preserve">
    <value>Applies an inverted, outline-style badge.</value>
  </data>
  <data name="Badges_Parameters_StartContent" xml:space="preserve">
    <value>Optional HTML to prepend before the badge content.</value>
  </data>
  <data name="Badges_Parameters_EndContent" xml:space="preserve">
    <value>Optional HTML to append after the badge content.</value>
  </data>
  <data name="Badges_Parameters_TagId" xml:space="preserve">
    <value>Optional &lt;code&gt;id&lt;/code&gt; attribute for the badge element.</value>
  </data>
  <data name="Badges_Notes_Title" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="Badges_Notes_1" xml:space="preserve">
    <value>Use &lt;code&gt;slot="start-content"&lt;/code&gt; and &lt;code&gt;slot="end-content"&lt;/code&gt; when embedding HTML.</value>
  </data>
  <data name="Badges_Notes_2" xml:space="preserve">
    <value>For font icons, use libraries like Font Awesome or Bootstrap Icons.</value>
  </data>
  <data name="Badges_Notes_3" xml:space="preserve">
    <value>All badges are rendered as &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements with class &lt;code&gt;fdcp-badge&lt;/code&gt;.</value>
  </data>
  <data name="Badges_Inverted_Anchor" xml:space="preserve">
    <value>inverted</value>
  </data>
  <data name="Badges_Overview_Anchor" xml:space="preserve">
    <value>overview</value>
  </data>
  <data name="Badges_Solid_Anchor" xml:space="preserve">
    <value>solid</value>
  </data>
  <data name="Badges_Slot_Anchor" xml:space="preserve">
    <value>start-end</value>
  </data>
  <data name="Badges_Parameters_Anchor" xml:space="preserve">
    <value>parameters</value>
  </data>
  <data name="Badges_Notes_Anchor" xml:space="preserve">
    <value>notes</value>
  </data>
  <data name="GlobalResources_Title" xml:space="preserve">
    <value>Global Resources Configuration</value>
  </data>
  <data name="GlobalResources_Description" xml:space="preserve">
    <value>This page demonstrates how to use the new global resources configuration feature in GCFoundation. You can configure CSS, JavaScript, meta tags, and link tags globally through the appsettings.json file.</value>
  </data>
  <data name="GlobalResources_CurrentConfiguration_Title" xml:space="preserve">
    <value>Current Configuration</value>
  </data>
  <data name="GlobalResources_CurrentConfiguration_Description" xml:space="preserve">
    <value>The following resources are currently configured to be loaded globally:</value>
  </data>
  <data name="GlobalResources_GlobalCssFiles_Title" xml:space="preserve">
    <value>Global CSS Files</value>
  </data>
  <data name="GlobalResources_GlobalJavaScriptFiles_Title" xml:space="preserve">
    <value>Global JavaScript Files</value>
  </data>
  <data name="GlobalResources_GlobalMetaTags_Title" xml:space="preserve">
    <value>Global Meta Tags</value>
  </data>
  <data name="GlobalResources_GlobalLinkTags_Title" xml:space="preserve">
    <value>Global Link Tags</value>
  </data>
  <data name="GlobalResources_NoCssFiles" xml:space="preserve">
    <value>No global CSS files configured.</value>
  </data>
  <data name="GlobalResources_NoJavaScriptFiles" xml:space="preserve">
    <value>No global JavaScript files configured.</value>
  </data>
  <data name="GlobalResources_NoMetaTags" xml:space="preserve">
    <value>No global meta tags configured.</value>
  </data>
  <data name="GlobalResources_NoLinkTags" xml:space="preserve">
    <value>No global link tags configured.</value>
  </data>
  <data name="GlobalResources_ResourceInclusion_Title" xml:space="preserve">
    <value>Resource Inclusion Settings</value>
  </data>
  <data name="GlobalResources_ResourceInclusion_Description" xml:space="preserve">
    <value>The following settings control which optional resources are included:</value>
  </data>
  <data name="GlobalResources_DefaultCss_Label" xml:space="preserve">
    <value>Default CSS:</value>
  </data>
  <data name="GlobalResources_DefaultJavaScript_Label" xml:space="preserve">
    <value>Default JavaScript:</value>
  </data>
  <data name="GlobalResources_GCDSResources_Label" xml:space="preserve">
    <value>GCDS Resources:</value>
  </data>
  <data name="GlobalResources_FontAwesome_Label" xml:space="preserve">
    <value>Font Awesome:</value>
  </data>
  <data name="GlobalResources_AlwaysEnabled" xml:space="preserve">
    <value>Always Enabled</value>
  </data>
  <data name="GlobalResources_Enabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="GlobalResources_Disabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="GlobalResources_DefaultFilesNote" xml:space="preserve">
    <value>Note: Default foundation CSS and JavaScript files are always included and cannot be disabled. This ensures that all GCFoundation components work properly on every page.</value>
  </data>
  <data name="GlobalResources_LoadingOrder_Title" xml:space="preserve">
    <value>Resource Loading Order</value>
  </data>
  <data name="GlobalResources_LoadingOrder_Description" xml:space="preserve">
    <value>Resources are loaded in the following order:</value>
  </data>
  <data name="GlobalResources_CssLoadingOrder_Title" xml:space="preserve">
    <value>CSS Loading Order</value>
  </data>
  <data name="GlobalResources_JavaScriptLoadingOrder_Title" xml:space="preserve">
    <value>JavaScript Loading Order</value>
  </data>
  <data name="GlobalResources_HowToConfigure_Title" xml:space="preserve">
    <value>How to Configure</value>
  </data>
  <data name="GlobalResources_HowToConfigure_Description" xml:space="preserve">
    <value>To configure global resources, update your appsettings.json file:</value>
  </data>
  <data name="GlobalResources_UsingHelper_Title" xml:space="preserve">
    <value>Using GlobalResourceHelper in Views</value>
  </data>
  <data name="GlobalResources_UsingHelper_Description" xml:space="preserve">
    <value>You can also use the GlobalResourceHelper in your Razor views for more control:</value>
  </data>
</root>