using Foundation.Components.Enums;
using Microsoft.AspNetCore.Razor.TagHelpers;

namespace Foundation.Components.TagHelpers.GCDS
{
    /// <summary>
    /// A TagHelper that renders a GC Design System signature component as a <c>&lt;gcds-signature&gt;</c> element.
    /// Supports optional linking, type, and variant customization for the signature.
    /// </summary>
    [HtmlTargetElement("gcds-signature")]
    public class SignatureTagHelper : BaseTagHelper
    {
        /// <summary>
        /// Gets or sets a value indicating whether the signature should have a link.
        /// If <c>true</c>, the signature will be wrapped in a link element.
        /// </summary>
        public bool HasLink { get; set; }

        /// <summary>
        /// Gets or sets the type of signature.
        /// Default is <see cref="SignatureType.Signature"/>.
        /// </summary>
        public SignatureType Type { get; set; } = SignatureType.Signature;

        /// <summary>
        /// Gets or sets the variant of the signature style.
        /// Default is <see cref="SignatureVariant.Colour"/>.
        /// </summary>
        public SignatureVariant Variant { get; set; } = SignatureVariant.Colour;

        /// <summary>
        /// Processes the <c>gcds-signature</c> element by adding the <c>has-link</c>, <c>lang</c>, <c>type</c>,
        /// and <c>variant</c> attributes to the rendered output.
        /// </summary>
        /// <param name="context">The context for the tag helper.</param>
        /// <param name="output">The HTML element output generated by the tag helper.</param>
        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            AddAttributeIfNotNull(output, "has-link", HasLink);
            AddAttributeIfNotNull(output, "lang", Lang);
            AddAttributeIfNotNull(output, "type", Type);
            AddAttributeIfNotNull(output, "variant", Variant);

            base.Process(context, output);
        }
    }
}
