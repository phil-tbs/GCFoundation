{"version":3,"sources":["fdcp-modal.js","components/fdcp-datatable.js","SessionManagement.js","components/fdcp-FilterBox.js","components/fdcp-formBuilder.js","components/fdcp-formValidation.js","components/fdcp-page-heading.js"],"names":["FDCPModal","_createClass","element","_classCallCheck","this","modal","isStatic","dataset","closeButton","querySelector","backdrop","bindEvents","key","value","_this","addEventListener","hide","document","e","classList","contains","add","body","style","overflow","remove","debounce","func","wait","timeout","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","apply","querySelectorAll","forEach","fdcpModal","timer","reminder","refreshUrl","logoutUrl","countdownElement","reminderTimeout","countdownInterval","secondsRemaining","startReminderTimer","startCountdown","logoutBtn","sessionModalElement","getElementById","parseInt","sessionTimeout","reminderTime","refresh","clearInterval","event","CustomEvent","detail","remainingTime","window","dispatchEvent","show","textContent","concat","setInterval","location","href","refreshBtn","fetch","method","credentials","then","el","tokenInput","tokenValue","config","layout","pagination","paginationSize","columns","height","JSON","parse","console","error","set","data","ajaxurl","ajaxURL","filterMode","sortMode","ajaxConfig","ajaxContentType","paginationMode","antiforgeryToken","DOMParser","parseFromString","getAttribute","ajaxRequestFunc","url","params","headers","Content-Type","RequestVerificationToken","stringify","response","json","Tabulator","tabulatorId","target","table","findTable","trim","clearFilter","log","getColumns","fields","filter","col","getDefinition","map","getField","setFilter","field","type","button","targetId","isExpanded","setAttribute","toString","toggle","initializeDependencies","dependencyMap","Map","dependency","sourceId","sourceQuestionId","has","get","push","dependencyList","currentValue","sourceElement","getGCDSValue","_ref","shouldApply","targetElement","evaluateCondition","applyDependencyAction","action","warn","_ref2","tagName","toLowerCase","name","fieldset","closest","from","cb","checkboxes","checked","checkedRadio","triggerValue","String","wrapper","findFormGroupWrapper","setRequired","toggleVisibility","toggleDisabled","clearElementValue","setValue","setElementValue","reinitializeGCDSComponent","startsWith","isRequired","isDisabled","clone","parentNode","hasAttribute","cloneNode","replaceChild","formGroup","parentElement","gcdsElement","disabled","required","removeAttribute","triggerChangeEvent","initializeValidation","validateElement","form","validateForm","_step","rules","language","isValid","errorMessage","_iterator","_createForOfIteratorHelper","s","n","done","rule","validateRule","errorMessages","err","f","updateElementValidation","preventDefault","firstInvalid","focus","RegExp","pattern","test","min","max","parseFloat","existingError","nextElementSibling","errorElement","createElement","className","insertBefore","nextSibling","src","backgroundImage"],"mappings":"oiCAAMA,WAAS,IAQVC,aAPD,SAAAD,EAAYE,GAASC,gBAAAC,KAAAJ,CAAA,EACjBI,KAAKC,MAAQH,EACbE,KAAKE,SAAsC,SAA3BJ,EAAQK,QAAO,OAC/BH,KAAKI,YAAcN,EAAQO,cAAc,oBAAoB,EAC7DL,KAAKM,SAAWR,EAAQO,cAAc,uBAAuB,EAE7DL,KAAKO,WAAW,CACpB,EAAC,CAAA,CAAAC,IAAA,aAAAC,MAED,WAAa,IAAAC,EAAAV,KACLA,KAAKI,aACLJ,KAAKI,YAAYO,iBAAiB,QAAS,WAAA,OAAMD,EAAKE,KAAK,CAAC,CAAA,EAG3DZ,KAAKE,UACNF,KAAKM,SAASK,iBAAiB,QAAS,WAAA,OAAMD,EAAKE,KAAK,CAAC,CAAA,EAG7DC,SAASF,iBAAiB,UAAW,SAACG,GACpB,WAAVA,EAAEN,KAAoB,CAACE,EAAKR,UAAYQ,EAAKT,MAAMc,UAAUC,SAAS,MAAM,GAC5EN,EAAKE,KAAK,CAElB,CAAC,CACL,CAAC,EAAA,CAAAJ,IAAA,OAAAC,MAED,WACIT,KAAKC,MAAMc,UAAUE,IAAI,MAAM,EAC/BJ,SAASK,KAAKC,MAAMC,SAAW,QACnC,CAAC,EAAA,CAAAZ,IAAA,OAAAC,MAED,WACIT,KAAKC,MAAMc,UAAUM,OAAO,MAAM,EAClCR,SAASK,KAAKC,MAAMC,SAAW,EACnC,CAAC,EAAA,GAAA,ECiDL,SAASE,SAASC,EAAMC,GACpB,IAAIC,EACJ,OAAO,WAAmB,IAAA,IAAAf,EAAAV,KAAA0B,EAAAC,UAAAC,OAANC,EAAI,IAAAC,MAAAJ,CAAA,EAAAK,EAAA,EAAAA,EAAAL,EAAAK,CAAA,GAAJF,EAAIE,GAAAJ,UAAAI,GACpBC,aAAaP,CAAO,EACpBA,EAAUQ,WAAW,WAAA,OAAMV,EAAKW,MAAMxB,EAAMmB,CAAI,CAAC,EAAEL,CAAI,CAC3D,CACJ,CDnDAX,SAASF,iBAAiB,mBAAoB,WAC1CE,SAASsB,iBAAiB,aAAa,EAAEC,QAAQ,SAAAnC,GAC7C,IAAIL,UAAUK,CAAK,CACvB,CAAC,CACL,CAAC,EE1CDY,SAASF,iBAAiB,mBAAoB,WAC1C,IAIM0B,EACAC,EACAC,EACAC,EACAC,EAEAC,EAEFC,EACAC,EACAC,EAEEC,EAmBAC,EAkBAC,EArDAC,EAAsBpC,SAASqC,eAAe,sBAAsB,EAErED,IAECZ,EAAY,IAAIzC,UAAUqD,CAAmB,EAC7CX,EAAQa,SAASF,EAAoB9C,QAAQiD,eAAgB,EAAE,EAC/Db,EAAWY,SAASF,EAAoB9C,QAAQkD,aAAc,EAAE,EAChEb,EAAaS,EAAoB9C,QAAQmD,QACzCb,EAAYQ,EAAoB9C,QAAQsC,UAExCC,EAAmB7B,SAASqC,eAAe,mBAAmB,EAM9DJ,EAAqB,WAEvBd,aAAaW,CAAe,EAC5BY,cAAcX,CAAiB,EAI/BD,EAAkBV,WAAW,WACzB,IAAMuB,EAAQ,IAAIC,YAAY,8BAA+B,CACzDC,OAAQ,CAAEC,cAA0B,GAAXpB,CAAc,CAC3C,CAAC,EACDqB,OAAOC,cAAcL,CAAK,EAE1BX,EAA8B,GAAXN,EACnBF,EAAUyB,KAAK,EACff,EAAe,CACnB,EAX8C,IAApBT,EAAQC,GAAiB,GAWhC,CACvB,EAEMQ,EAAiB,WACdL,IAELA,EAAiBqB,YAAW,GAAAC,OAAMnB,EAAgB,GAAA,EAElDD,EAAoBqB,YAAY,WAC5BpB,EAAAA,GAEwB,GACpBU,cAAcX,CAAiB,EAC/BgB,OAAOM,SAASC,KAAO1B,GAEvBC,EAAiBqB,YAAW,GAAAC,OAAMnB,EAAgB,GAAA,CAE1D,EAAG,GAAI,EACX,EAEMuB,EAAavD,SAASR,cAAc,0CAA0C,EAC9E2C,EAAYnC,SAASR,cAAc,yCAAyC,EAE9E+D,GACAA,EAAWzD,iBAAiB,QAAS,WACjC0D,MAAM7B,EAAY,CACd8B,OAAQ,OACRC,YAAa,SACjB,CAAC,EAAEC,KAAK,WACJnC,EAAUzB,KAAK,EACfkC,EAAmB,CACvB,CAAC,CACL,CAAC,EAGDE,GACAA,EAAUrC,iBAAiB,QAAS,WAChCiD,OAAOM,SAASC,KAAO1B,CAC3B,CAAC,EAILK,EAAmB,EACvB,CAAC,ED5EDjC,SAASsB,iBAAiB,kBAAkB,EAAEC,QAAQ,SAAAqC,GAClD,IAiCcC,EAGIC,EApCZC,EAAS,CACXC,OAAQJ,EAAGtE,QAAQ0E,QAAU,aAC7BC,WAAY,CAAA,EACZC,eAAgB5B,SAASsB,EAAGtE,QAAQ4E,gBAAkB,IAAI,EAC1DC,QAAS,GACTC,OAAQ,MACZ,EAGA,GAAIR,EAAGtE,QAAQ6E,QACX,IACIJ,EAAOI,QAAUE,KAAKC,MAAMV,EAAGtE,QAAQ6E,OAAO,CAGlD,CAFE,MAAOlE,GACLsE,QAAQC,MAAM,2BAA4BvE,CAAC,CAC/C,CAGA2D,EAAGtE,QAAQmF,IACXV,EAAOW,KAAOL,KAAKC,MAAMV,EAAGtE,QAAQmF,GAAG,EAChCb,EAAGtE,QAAQqF,UAClBZ,EAAOa,QAAUhB,EAAGtE,QAAQqF,QAC5BZ,EAAOc,WAAa,SACpBd,EAAOe,SAAW,SAClBf,EAAOgB,WAAa,OACpBhB,EAAOiB,gBAAkB,OACzBjB,EAAOkB,eAAiB,SACxBlB,EAAOc,WAAa,SAGhBjB,EAAGtE,QAAQ4F,oBAILrB,GAFS,IAAIsB,WACKC,gBAAgBxB,EAAGtE,QAAQ4F,iBAAkB,WAAW,EACpD1F,cAAc,0CAA0C,KAG1EsE,EAAaD,EAAWwB,aAAa,OAAO,EAClDtB,EAAOuB,gBAAkB,SAASC,EAAKxB,EAAQyB,GAC3C,OAAOhC,MAAM+B,EAAK,CACd9B,OAAQ,OACRgC,QAAS,CACLC,eAAgB,mBAChBC,yBAA4B7B,CAChC,EACAzD,KAAMgE,KAAKuB,UAAUJ,CAAM,CAC/B,CAAC,EAAE7B,KAAK,SAAAkC,GAAQ,OAAIA,EAASC,KAAK,CAAC,CAAA,CACvC,GAMZ,IAAIC,UAAUnC,EAAIG,CAAM,CAC5B,CAAC,EAED/D,SAASsB,iBAAiB,yBAAyB,EAAEC,QAAQ,SAAAqC,GACzDA,EAAG9D,iBAAiB,QAASW,SAAS,SAAUR,GAC5C,IAAI+F,EAAc/F,EAAEgG,OAAO3G,QAAQ0G,YAC/BE,EAAQH,UAAUI,UAAU,IAAMH,CAAW,EAAE,GAC7CpG,EAAQK,EAAEgG,OAAOrG,MAAMwG,KAAK,EAE7BF,IAES,KAAVtG,EACAsG,EAAMG,YAAY,GAElB9B,QAAQ+B,IAAIJ,EAAMK,WAAW,CAAC,EACxBC,EAASN,EAAMK,WAAW,EAC3BE,OAAO,SAAAC,GAEJ,OADYA,EAAIC,cAAc,EACnBF,MACf,CAAC,EACAG,IAAI,SAAAF,GAAG,OAAIA,EAAIG,SAAS,CAAC,CAAA,EAG9BX,EAAMY,UACFN,EAAOI,IAAI,SAAAG,GAAK,MAAK,CAAEA,MAAOA,EAAOC,KAAM,OAAQpH,MAAOA,CAAM,CAAC,CAAC,CACtE,GAER,EAAG,GAAG,CAAC,CACX,CAAC,EEjFDI,SAASF,iBAAiB,mBAAoB,WAC1CE,SAASsB,iBAAiB,6BAA6B,EAAEC,QAAQ,SAAA0F,GAC7DA,EAAOnH,iBAAiB,QAAS,WAC7B,IAAMoH,EAAW/H,KAAKkG,aAAa,2BAA2B,EACxDY,EAASjG,SAASqC,eAAe6E,CAAQ,EAEzCC,EAAoD,SAAvChI,KAAKkG,aAAa,eAAe,EACpDlG,KAAKiI,aAAa,iBAAiB,CAAED,GAAYE,SAAS,CAAC,EAEvDpB,GACAA,EAAO/F,UAAUoH,OAAO,YAAa,CAACH,CAAU,CAExD,CAAC,CACL,CAAC,CACL,CAAC,ECdDnH,SAASF,iBAAiB,mBAAoB,WAC1CyH,uBAAuB,CAC3B,CAAC,EAKD,IAAMA,uBAAyB,WAE3B,IAAMC,EAAgB,IAAIC,IAG1BzH,SAASsB,iBAAiB,qBAAqB,EAAEC,QAAQ,SAAUqC,GAC/D,IACyBS,KAAKC,MAAMV,EAAGyB,aAAa,mBAAmB,CAAC,EACvD9D,QAAQ,SAAAmG,GACjB,IAAMC,EAAWD,EAAWE,iBACvBJ,EAAcK,IAAIF,CAAQ,GAC3BH,EAAc/C,IAAIkD,EAAU,EAAE,EAGlCH,EAAcM,IAAIH,CAAQ,EAAEI,KAAK,CAC7Bb,SAAUtD,EAAGyB,aAAa,UAAU,GAC3BzB,EAAGyB,aAAa,WAAW,GAC3BzB,EAAGyB,aAAa,aAAa,GAC7BzB,EAAGyB,aAAa,UAAU,GAC1BzB,EAAGyB,aAAa,aAAa,GAC7BzB,EAAGyB,aAAa,IAAI,EAC7BqC,WAAYA,CAChB,CAAC,CACL,CAAC,CAGL,CAFE,MAAOlD,GACLD,QAAQC,MAAM,8BAA+BA,CAAK,CACtD,CACJ,CAAC,EAGDgD,EAAcjG,QAAQ,SAACyG,EAAgBL,GAEnC,IAcMM,EAdAC,EAAgBlI,SAASR,cAAa,4BAAA2D,OAC3BwE,EAAQ,+BAAA,EAAAxE,OACPwE,EAAQ,iCAAA,EAAAxE,OACNwE,EAAQ,wBAAA,EAAAxE,OACjBwE,EAAQ,iCAAA,EAAAxE,OACCwE,EAAQ,cAAA,CAC3B,EAEIO,GAMCD,EAAeE,aAAaD,CAAa,EAC/CF,EAAezG,QAAQ,SAAA6G,GAA8B,IAgB3CC,EAhBgBnB,EAAQkB,EAARlB,SAAUQ,EAAUU,EAAVV,WAE1BY,EAAgBtI,SAASR,cAAa,gCAAA2D,OAC3B+D,EAAQ,mCAAA,EAAA/D,OACP+D,EAAQ,qCAAA,EAAA/D,OACN+D,EAAQ,kCAAA,EAAA/D,OACX+D,EAAQ,qCAAA,EAAA/D,OACL+D,EAAQ,4BAAA,EAAA/D,OACjB+D,EAAQ,kBAAA,CAClB,EAEIoB,GAKCD,EAAcE,kBAAkBb,EAAYO,CAAY,EAC9DO,sBAAsBF,EAAeZ,EAAWe,OAAQJ,EAAaX,CAAU,GAL3EnD,QAAQmE,KAAI,0BAAAvF,OAA2B+D,EAAQ,YAAA,CAAY,CAMnE,CAAC,EAGDgB,EAAcpI,iBAAiB,aAAc,SAAC6C,GAE1C,IAAM/C,EAAQ+C,EAAME,OAEpBmF,EAAezG,QAAQ,SAAAoH,GAA8B,IAgB3CN,EAhBgBnB,EAAQyB,EAARzB,SAAUQ,EAAUiB,EAAVjB,WAE1BY,EAAgBtI,SAASR,cAAa,oCAAA2D,OAC3B+D,EAAQ,uCAAA,EAAA/D,OACP+D,EAAQ,yCAAA,EAAA/D,OACN+D,EAAQ,sCAAA,EAAA/D,OACX+D,EAAQ,yCAAA,EAAA/D,OACL+D,EAAQ,gCAAA,EAAA/D,OACjB+D,EAAQ,sBAAA,CAClB,EAEIoB,GAKCD,EAAcE,kBAAkBb,EAAY9H,CAAK,EACvD4I,sBAAsBF,EAAeZ,EAAWe,OAAQJ,EAAaX,CAAU,GAL3EnD,QAAQmE,KAAI,0BAAAvF,OAA2B+D,EAAQ,YAAA,CAAY,CAMnE,CAAC,CACL,CAAC,GAlDG3C,QAAQmE,KAAI,kBAAAvF,OAAmBwE,EAAQ,6BAAA,CAA6B,CAmD5E,CAAC,CACL,EAMMQ,aAAe,SAAClJ,GAClB,GAAI,CAACA,EAAS,OAAO,KAGrB,OAAQA,EAAQ2J,QAAQC,YAAY,GAChC,IAAK,aACL,IAAK,cACL,IAAK,gBACD,OAAO5J,EAAQW,MACnB,IAAK,gBACD,OAAIX,EAAQ6J,MACFC,EAAW9J,EAAQ+J,QAAQ,eAAe,GAErC/H,MAAMgI,KAAKF,EAASzH,iBAAiB,uBAAuB,CAAC,EAC/DsF,IAAI,SAAAsC,GAAE,OAAIA,EAAGtJ,KAAK,CAAA,GAErBuJ,EAAanJ,SAASsB,iBAAgB,uBAAA6B,OAAwBlE,EAAQ6J,KAAI,YAAA,CAAY,EACrF7H,MAAMgI,KAAKE,CAAU,EAAEvC,IAAI,SAAAsC,GAAE,OAAIA,EAAGtJ,KAAK,CAAA,GAE7CX,EAAQmK,QACnB,IAAK,aACD,IAAMC,EAAerJ,SAASR,cAAa,oBAAA2D,OAAqBlE,EAAQ6J,KAAI,YAAA,CAAY,EACxF,OAAOO,EAAeA,EAAazJ,MAAQ,KAC/C,QACI,OAAOX,EAAQW,KACvB,CACJ,EAKM2I,kBAAoB,SAACb,EAAYO,GAC7BqB,EAAe5B,EAAW4B,aAEhC,OAAOC,OAAOtB,CAAY,IAAMsB,OAAOD,CAAY,CACvD,EAKMd,sBAAwB,SAACvJ,EAASwJ,EAAQJ,EAAaX,GACzD,IAAI8B,EAAUC,qBAAqBxK,CAAO,EAE1C,OAAQwJ,GACJ,KAAK,EACDiB,YAAYzK,EAASoJ,CAAW,EAChC,MAEJ,KAAK,EACDsB,iBAAiBH,EAASnB,CAAW,EAGrC,MAEJ,KAAK,EACDsB,iBAAiBH,EAAS,CAACnB,CAAW,EAGtC,MAEJ,KAAK,EACDuB,eAAe3K,EAAS,CAACoJ,CAAW,EACpC,MAEJ,KAAK,EACDuB,eAAe3K,EAASoJ,CAAW,EACnC,MAEJ,KAAK,EACGA,GACAwB,kBAAkB5K,CAAO,EAE7B,MAEJ,KAAK,EACGoJ,GAAeX,EAAWoC,UAC1BC,gBAAgB9K,EAASyI,EAAWoC,QAAQ,EAEhD,MAEJ,QACIvF,QAAQmE,KAAI,uBAAAvF,OAAwBsF,CAAM,CAAE,CACpD,CACJ,EAKMuB,0BAA4B,SAAC/K,GAC/B,GAAKA,GAAYA,EAAQ2J,QAAQC,YAAY,EAAEoB,WAAW,OAAO,EACjE,IAEI,IAMMhC,EACAiC,EACAC,EAGAC,EAXN,GAAKnL,EAAQoL,WA2Bb,OArBMpC,EAAeE,aAAalJ,CAAO,EACnCiL,EAAajL,EAAQqL,aAAa,UAAU,EAC5CH,EAAalL,EAAQqL,aAAa,UAAU,EAG5CF,EAAQnL,EAAQsL,UAAU,CAAA,CAAI,EAGhCL,GAAYE,EAAMhD,aAAa,WAAY,EAAE,EAC7C+C,GAAYC,EAAMhD,aAAa,WAAY,EAAE,EAGjDnI,EAAQoL,WAAWG,aAAaJ,EAAOnL,CAAO,EAG1CgJ,MAAAA,GACA7G,WAAW,WACP2I,gBAAgBK,EAAOnC,CAAY,CACvC,EAAG,CAAC,EAGDmC,EA1BH7F,QAAQmE,KAAK,wCAAyCzJ,CAAO,CA6BrE,CAFE,MAAOuF,GACLD,QAAQC,MAAM,uCAAwCA,CAAK,CAC/D,CACJ,EAKMiF,qBAAuB,SAACxK,GAE1B,IAAMwL,EAAYxL,EAAQ+J,QAAQ,gBAAgB,EAClD,OAAIyB,KAGE1B,EAAW9J,EAAQ+J,QAAQ,eAAe,IACG,kBAAlC/J,EAAQ2J,QAAQC,YAAY,EAAwB5J,EAAU,OAEpE8J,EAASC,QAAQ,gBAAgB,GAAKD,EAAS2B,eAAiBzL,EAIpEA,EAAQyL,eAAiBzL,EACpC,EAKM0K,iBAAmB,SAAC1K,EAASgE,GAC1BhE,IAEDgE,GACAhE,EAAQiB,UAAUM,OAAO,gBAAgB,EAEzCvB,EAAQqC,iBAAiB,kBAAkB,EAAEC,QAAQ,SAAAoJ,GACjDX,0BAA0BW,CAAW,CACzC,CAAC,GAED1L,EAAQiB,UAAUE,IAAI,gBAAgB,EAE9C,EAKMwJ,eAAiB,SAAC3K,EAAS2L,GACzB3L,EAAQ2L,WAAaA,IACrB3L,EAAQ2L,SAAWA,EACnB3L,EAAQmI,aAAa,gBAAiBwD,CAAQ,EAEtD,EAKMlB,YAAc,SAACzK,EAAS4L,GAC1B,GAAK5L,EACL,IACI,IAAMmL,EAAQnL,EAAQsL,UAAU,CAAA,CAAI,EAEpCH,EAAMU,gBAAgB,eAAe,EAEjCV,EAAMxB,QAAQC,YAAY,EAAEoB,WAAW,OAAO,EAC1CY,EACAT,EAAMhD,aAAa,WAAY,EAAE,EAEjCgD,EAAMU,gBAAgB,UAAU,GAIpCV,EAAMS,SAAWA,GAEbT,EAAMhD,aAAa,WAAY,EAAE,EAEjCgD,EAAMU,gBAAgB,UAAU,EAIxC7L,EAAQoL,WAAWG,aAAaJ,EAAOnL,CAAO,CAIlD,CAFE,MAAOuF,GACLD,QAAQmE,KAAK,gCAAiClE,CAAK,CACvD,CACJ,EAKMqF,kBAAoB,SAAC5K,GACF,aAAjBA,EAAQ+H,MAAwC,UAAjB/H,EAAQ+H,KACvC/H,EAAQmK,QAAU,CAAA,EAElBnK,EAAQW,MAAQ,GAEpBmL,mBAAmB9L,CAAO,CAC9B,EAKM8K,gBAAkB,SAAC9K,EAASW,GACT,aAAjBX,EAAQ+H,MAAwC,UAAjB/H,EAAQ+H,KACvC/H,EAAQmK,QAAoB,CAAA,IAAVxJ,GAA4B,SAAVA,EAEpCX,EAAQW,MAAQA,EAEpBmL,mBAAmB9L,CAAO,CAC9B,E,qmCC5UAe,SAASF,iBAAiB,mBAAoB,WAC1CkL,qBAAqB,CACzB,CAAC,EAKD,IAAMA,qBAAuB,WAEzBhL,SAASsB,iBAAiB,yBAAyB,EAAEC,QAAQ,SAAAtC,GAC3CoF,KAAKC,MAAMrF,EAAQoG,aAAa,uBAAuB,CAAC,EAGlEpG,EAAQqL,aAAa,kBAAkB,GACvCrL,EAAQa,iBAAiB,OAAQ,WAAA,OAAMmL,gBAAgBhM,CAAO,CAAC,CAAA,EAJnE,IAQMiM,EAAOjM,EAAQ+J,QAAQ,MAAM,EAC/BkC,GACKA,CAAAA,EAAKZ,aAAa,wBAAwB,IAC3CY,EAAKpL,iBAAiB,SAAU,SAAC6C,GAAK,OAAKwI,aAAaxI,CAAK,CAAC,CAAA,EAC9DuI,EAAK9D,aAAa,yBAA0B,MAAM,EAG9D,CAAC,CACL,EAKM6D,gBAAkB,SAAChM,GACrB,IAMwBmM,EANlBC,EAAQhH,KAAKC,MAAMrF,EAAQoG,aAAa,uBAAuB,CAAC,EAChEzF,EAAQuI,aAAalJ,CAAO,EAC5BqM,EAAWrM,EAAQoG,aAAa,MAAM,GAAK,KAC7CkG,EAAU,CAAA,EACVC,EAAe,GAAGC,EAAAC,2BAEHL,CAAK,EAAA,IAAxB,IAAAI,EAAAE,EAAA,EAAA,EAAAP,EAAAK,EAAAG,EAAA,GAAAC,MAA0B,CAAA,IAAfC,EAAIV,EAAAxL,MACX,GAAI,CAACmM,aAAaD,EAAMlM,CAAK,EAAG,CAC5B2L,EAAU,CAAA,EACVC,EAAeM,EAAKE,cAAcV,EAASzC,YAAY,IAC1CiD,EAAKE,cAAkB,IACvB,gBACb,KACJ,CACJ,CAAC,CAAA,MAAAC,GAAAR,EAAAxL,EAAAgM,CAAA,CAAA,CAAA,QAAAR,EAAAS,EAAA,CAAA,CAGD,OADAC,wBAAwBlN,EAASsM,EAASC,CAAY,EAC/CD,CACX,EAKMJ,aAAe,SAACxI,GAClB,IAAMuI,EAAOvI,EAAMsD,OACfsF,EAAU,CAAA,EAEdL,EAAK5J,iBAAiB,yBAAyB,EAAEC,QAAQ,SAAAtC,GAChDgM,gBAAgBhM,CAAO,IACxBsM,EAAU,CAAA,EAElB,CAAC,EAEIA,CAAAA,IACD5I,EAAMyJ,eAAe,EAEfC,EAAenB,EAAK1L,cAAc,kBAAkB,IAEtD6M,EAAaC,MAAM,CAG/B,EAKMP,aAAe,SAACD,EAAMlM,GACxB,GAAI,CAACA,GAAuB,aAAdkM,EAAK9E,KAAqB,MAAO,CAAA,EAE/C,OAAQ8E,EAAK9E,MACT,IAAK,WACD,OAAOpH,MAAAA,GAAmD,KAAVA,EACpD,IAAK,QACD,OAAO,IAAI2M,OAAOT,EAAKU,OAAO,EAAEC,KAAK7M,CAAK,EAC9C,IAAK,QACD,MAAO,6BAA6B6M,KAAK7M,CAAK,EAClD,IAAK,YACD,OAAOA,EAAMmB,QAAU+K,EAAKY,IAChC,IAAK,YACD,OAAO9M,EAAMmB,QAAU+K,EAAKa,IAChC,IAAK,WACD,OAAOC,WAAWhN,CAAK,GAAKkM,EAAKY,IACrC,IAAK,WACD,OAAOE,WAAWhN,CAAK,GAAKkM,EAAKa,IACrC,QACI,MAAO,CAAA,CACf,CACJ,EAKMR,wBAA0B,SAAClN,EAASsM,EAASC,GAE/CvM,EAAQiB,UAAUM,OAAO,iBAAiB,EAC1C,IAAMqM,EAAgB5N,EAAQ6N,mBAC1BD,MAAAA,GAAAA,EAAe3M,UAAUC,SAAS,oBAAoB,GACtD0M,EAAcrM,OAAO,EAGpB+K,IAEDtM,EAAQiB,UAAUE,IAAI,iBAAiB,GACjC2M,EAAe/M,SAASgN,cAAc,KAAK,GACpCC,UAAY,qBACzBF,EAAa7J,YAAcsI,EAC3BvM,EAAQoL,WAAW6C,aAAaH,EAAc9N,EAAQkO,WAAW,EAEzE,EAKMhF,aAAe,SAAClJ,GAClB,GAAI,CAACA,EAAS,OAAO,KAGrB,OAAQA,EAAQ2J,QAAQC,YAAY,GAChC,IAAK,aACL,IAAK,cACL,IAAK,gBACD,OAAO5J,EAAQW,MACnB,IAAK,gBACD,OAAOX,EAAQmK,QACnB,IAAK,aACD,OAAOnK,EAAQmK,QAAUnK,EAAQW,MAAQ,KAC7C,QACI,OAAOX,EAAQW,KACvB,CACJ,EC7IAI,SAASF,iBAAiB,mBAAoB,WAE1CE,SAASsB,iBAAiB,wCAAwC,EAAEC,QAAQ,SAAUqC,GAClF,IAAIwJ,EAAMxJ,EAAGyB,aAAa,aAAa,EACnC+H,IACAxJ,EAAGtD,MAAM+M,gBAAkB,OAASD,EAAM,IAElD,CAAC,CACL,CAAC","file":"foundation.min.js","sourcesContent":["class FDCPModal {\r\n    constructor(element) {\r\n        this.modal = element;\r\n        this.isStatic = element.dataset.static === 'true';\r\n        this.closeButton = element.querySelector('.fdcp-modal__close');\r\n        this.backdrop = element.querySelector('.fdcp-modal__backdrop');\r\n        \r\n        this.bindEvents();\r\n    }\r\n\r\n    bindEvents() {\r\n        if (this.closeButton) {\r\n            this.closeButton.addEventListener('click', () => this.hide());\r\n        }\r\n\r\n        if (!this.isStatic) {\r\n            this.backdrop.addEventListener('click', () => this.hide());\r\n        }\r\n\r\n        document.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Escape' && !this.isStatic && this.modal.classList.contains('show')) {\r\n                this.hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    show() {\r\n        this.modal.classList.add('show');\r\n        document.body.style.overflow = 'hidden';\r\n    }\r\n\r\n    hide() {\r\n        this.modal.classList.remove('show');\r\n        document.body.style.overflow = '';\r\n    }\r\n}\r\n\r\n// Initialize all modals on the page\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    document.querySelectorAll('.fdcp-modal').forEach(modal => {\r\n        new FDCPModal(modal);\r\n    });\r\n});","document.querySelectorAll('.tabulator-table').forEach(el => {\r\n    const config = {\r\n        layout: el.dataset.layout || \"fitColumns\",\r\n        pagination: true,\r\n        paginationSize: parseInt(el.dataset.paginationSize || \"10\"),\r\n        columns: [],\r\n        height: '100%'\r\n    };\r\n\r\n    // Parse columns\r\n    if (el.dataset.columns) {\r\n        try {\r\n            config.columns = JSON.parse(el.dataset.columns);\r\n        } catch (e) {\r\n            console.error(\"Failed to parse columns:\", e);\r\n        }\r\n    }\r\n\r\n    if (el.dataset.set) {\r\n        config.data = JSON.parse(el.dataset.set);\r\n    } else if (el.dataset.ajaxurl) {\r\n        config.ajaxURL = el.dataset.ajaxurl;\r\n        config.filterMode = \"remote\";\r\n        config.sortMode = \"remote\";\r\n        config.ajaxConfig = \"POST\";\r\n        config.ajaxContentType = \"json\";\r\n        config.paginationMode = \"remote\";\r\n        config.filterMode = \"remote\";\r\n\r\n        // Add anti-forgery token to AJAX requests if available\r\n        if (el.dataset.antiforgeryToken) {\r\n            // Parse the anti-forgery token HTML to extract the token value\r\n            const parser = new DOMParser();\r\n            const tokenDoc = parser.parseFromString(el.dataset.antiforgeryToken, 'text/html');\r\n            const tokenInput = tokenDoc.querySelector('input[name=\"__RequestVerificationToken\"]');\r\n            \r\n            if (tokenInput) {\r\n                const tokenValue = tokenInput.getAttribute('value');\r\n                config.ajaxRequestFunc = function(url, config, params) {\r\n                    return fetch(url, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'RequestVerificationToken': tokenValue\r\n                        },\r\n                        body: JSON.stringify(params)\r\n                    }).then(response => response.json());\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    new Tabulator(el, config);\r\n});\r\n\r\ndocument.querySelectorAll('.tabulator-search-input').forEach(el => {\r\n    el.addEventListener(\"input\", debounce(function (e) {\r\n        let tabulatorId = e.target.dataset.tabulatorId;\r\n        let table = Tabulator.findTable(\"#\" + tabulatorId)[0];\r\n        const value = e.target.value.trim();\r\n\r\n        if (!table) return;\r\n\r\n        if (value === \"\") {\r\n            table.clearFilter();\r\n        } else {\r\n            console.log(table.getColumns());\r\n            const fields = table.getColumns()\r\n                .filter(col => {\r\n                    const def = col.getDefinition();\r\n                    return def.filter; // Only fields with headerFilter enabled\r\n                })\r\n                .map(col => col.getField());\r\n\r\n\r\n            table.setFilter(\r\n                fields.map(field => ({ field: field, type: \"like\", value: value }))\r\n            );\r\n        }\r\n    }, 200)); // 200ms debounce\r\n});\r\n\r\nfunction debounce(func, wait) {\r\n    let timeout;\r\n    return function (...args) {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => func.apply(this, args), wait);\r\n    };\r\n}\r\n","document.addEventListener(\"DOMContentLoaded\", () => {\r\n    const sessionModalElement = document.getElementById('session-extend-modal');\r\n\r\n    if (!sessionModalElement) return;\r\n\r\n    const fdcpModal = new FDCPModal(sessionModalElement);\r\n    const timer = parseInt(sessionModalElement.dataset.sessionTimeout, 10);\r\n    const reminder = parseInt(sessionModalElement.dataset.reminderTime, 10);\r\n    const refreshUrl = sessionModalElement.dataset.refresh;\r\n    const logoutUrl = sessionModalElement.dataset.logoutUrl;\r\n\r\n    const countdownElement = document.getElementById('session-countdown');\r\n\r\n    let reminderTimeout;\r\n    let countdownInterval;\r\n    let secondsRemaining;\r\n\r\n    const startReminderTimer = () => {\r\n        // Clear existing timers\r\n        clearTimeout(reminderTimeout);\r\n        clearInterval(countdownInterval);\r\n\r\n        const reminderTimeInMs = (timer - reminder) * 60 * 1000;\r\n\r\n        reminderTimeout = setTimeout(() => {\r\n            const event = new CustomEvent(\"foundation:session-reminder\", {\r\n                detail: { remainingTime: reminder * 60 }\r\n            });\r\n            window.dispatchEvent(event);\r\n\r\n            secondsRemaining = reminder * 60;\r\n            fdcpModal.show();\r\n            startCountdown();\r\n        }, reminderTimeInMs);\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        if (!countdownElement) return;\r\n\r\n        countdownElement.textContent = `${secondsRemaining}s`;\r\n\r\n        countdownInterval = setInterval(() => {\r\n            secondsRemaining--;\r\n\r\n            if (secondsRemaining <= 0) {\r\n                clearInterval(countdownInterval);\r\n                window.location.href = logoutUrl;\r\n            } else {\r\n                countdownElement.textContent = `${secondsRemaining}s`;\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    const refreshBtn = document.querySelector('[button-id=\"session-extend-refresh-btn\"]');\r\n    const logoutBtn = document.querySelector('[button-id=\"session-extend-logout-btn\"]');\r\n\r\n    if (refreshBtn) {\r\n        refreshBtn.addEventListener(\"click\", () => {\r\n            fetch(refreshUrl, {\r\n                method: 'POST',\r\n                credentials: 'include'\r\n            }).then(() => {\r\n                fdcpModal.hide();\r\n                startReminderTimer(); // Reset everything\r\n            });\r\n        });\r\n    }\r\n\r\n    if (logoutBtn) {\r\n        logoutBtn.addEventListener(\"click\", () => {\r\n            window.location.href = logoutUrl;\r\n        });\r\n    }\r\n\r\n    // Kick off the first reminder timer\r\n    startReminderTimer();\r\n});","document.addEventListener('DOMContentLoaded', function () {\r\n    document.querySelectorAll('[data-fdcp-collapse-toggle]').forEach(button => {\r\n        button.addEventListener('click', function () {\r\n            const targetId = this.getAttribute('data-fdcp-collapse-toggle');\r\n            const target = document.getElementById(targetId);\r\n\r\n            const isExpanded = this.getAttribute('aria-expanded') === 'true';\r\n            this.setAttribute('aria-expanded', (!isExpanded).toString());\r\n\r\n            if (target) {\r\n                target.classList.toggle('fdcp-show', !isExpanded);\r\n            }\r\n        });\r\n    });\r\n});","document.addEventListener(\"DOMContentLoaded\", () => {\r\n    initializeDependencies();\r\n});\r\n\r\n/**\r\n * Initialize all form elements with dependencies\r\n */\r\nconst initializeDependencies = () => {\r\n    // Create a map of source elements to their dependencies\r\n    const dependencyMap = new Map();\r\n\r\n    // First pass: collect all dependencies and organize them by source\r\n    document.querySelectorAll('[data-dependencies]').forEach(function (el) {\r\n        try {\r\n            const dependencies = JSON.parse(el.getAttribute('data-dependencies'));\r\n            dependencies.forEach(dependency => {\r\n                const sourceId = dependency.sourceQuestionId;\r\n                if (!dependencyMap.has(sourceId)) {\r\n                    dependencyMap.set(sourceId, []);\r\n                }\r\n                // Store the target ID instead of the element reference\r\n                dependencyMap.get(sourceId).push({\r\n                    targetId: el.getAttribute('input-id') || \r\n                             el.getAttribute('select-id') || \r\n                             el.getAttribute('textarea-id') || \r\n                             el.getAttribute('radio-id') || \r\n                             el.getAttribute('checkbox-id') || \r\n                             el.getAttribute('id'),\r\n                    dependency: dependency\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.error('Error parsing dependencies:', error);\r\n        }\r\n    });\r\n\r\n    // Second pass: set up event listeners on source elements\r\n    dependencyMap.forEach((dependencyList, sourceId) => {\r\n        // Find the source element\r\n        const sourceElement = document.querySelector(`\r\n            [input-id=\"${sourceId}\"],\r\n            [select-id=\"${sourceId}\"],\r\n            [textarea-id=\"${sourceId}\"],\r\n            [id=\"${sourceId}\"],\r\n            [fieldset-id=\"${sourceId}\"]\r\n        `);\r\n\r\n        if (!sourceElement) {\r\n            console.warn(`Source element ${sourceId} not found for dependencies`);\r\n            return;\r\n        }\r\n\r\n        // Initial evaluation for all dependencies\r\n        const currentValue = getGCDSValue(sourceElement);\r\n        dependencyList.forEach(({ targetId, dependency }) => {\r\n            // Find the current element in the DOM\r\n            const targetElement = document.querySelector(`\r\n                [input-id=\"${targetId}\"],\r\n                [select-id=\"${targetId}\"],\r\n                [textarea-id=\"${targetId}\"],\r\n                [radio-id=\"${targetId}\"],\r\n                [checkbox-id=\"${targetId}\"],\r\n                [id=\"${targetId}\"]\r\n            `);\r\n\r\n            if (!targetElement) {\r\n                console.warn(`Target element with ID ${targetId} not found`);\r\n                return;\r\n            }\r\n\r\n            const shouldApply = evaluateCondition(dependency, currentValue);\r\n            applyDependencyAction(targetElement, dependency.action, shouldApply, dependency);\r\n        });\r\n\r\n        // Set up event listeners\r\n        sourceElement.addEventListener(\"gcdsChange\", (event) => {\r\n            \r\n            const value = event.detail;\r\n            \r\n            dependencyList.forEach(({ targetId, dependency }) => {\r\n                // Find the current element in the DOM\r\n                const targetElement = document.querySelector(`\r\n                    [input-id=\"${targetId}\"],\r\n                    [select-id=\"${targetId}\"],\r\n                    [textarea-id=\"${targetId}\"],\r\n                    [radio-id=\"${targetId}\"],\r\n                    [checkbox-id=\"${targetId}\"],\r\n                    [id=\"${targetId}\"]\r\n                `);\r\n\r\n                if (!targetElement) {\r\n                    console.warn(`Target element with ID ${targetId} not found`);\r\n                    return;\r\n                }\r\n\r\n                const shouldApply = evaluateCondition(dependency, value);\r\n                applyDependencyAction(targetElement, dependency.action, shouldApply, dependency);\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Get the value from a GCDS component\r\n */\r\nconst getGCDSValue = (element) => {\r\n    if (!element) return null;\r\n\r\n    // Handle different GCDS component types\r\n    switch (element.tagName.toLowerCase()) {\r\n        case 'gcds-input':\r\n        case 'gcds-select':\r\n        case 'gcds-textarea':\r\n            return element.value;\r\n        case 'gcds-checkbox':\r\n            if (element.name) {\r\n                const fieldset = element.closest('gcds-fieldset');\r\n                if (fieldset) {\r\n                    return Array.from(fieldset.querySelectorAll('gcds-checkbox:checked'))\r\n                        .map(cb => cb.value);\r\n                }\r\n                const checkboxes = document.querySelectorAll(`gcds-checkbox[name=\"${element.name}\"]:checked`);\r\n                return Array.from(checkboxes).map(cb => cb.value);\r\n            }\r\n            return element.checked;\r\n        case 'gcds-radio':\r\n            const checkedRadio = document.querySelector(`gcds-radio[name=\"${element.name}\"]:checked`);\r\n            return checkedRadio ? checkedRadio.value : null;\r\n        default:\r\n            return element.value;\r\n    }\r\n};\r\n\r\n/**\r\n * Evaluate if a dependency condition is met\r\n */\r\nconst evaluateCondition = (dependency, currentValue) => {\r\n    const triggerValue = dependency.triggerValue;\r\n    // Default to equals comparison since we don't have condition in the model anymore\r\n    return String(currentValue) === String(triggerValue);\r\n};\r\n\r\n/**\r\n * Apply the dependency action to the target element\r\n */\r\nconst applyDependencyAction = (element, action, shouldApply, dependency) => {\r\n    let wrapper = findFormGroupWrapper(element);\r\n\r\n    switch (action) {\r\n        case 0: // Require\r\n            setRequired(element, shouldApply);\r\n            break;\r\n            \r\n        case 1: // Show\r\n            toggleVisibility(wrapper, shouldApply);\r\n            if (shouldApply) {\r\n            }\r\n            break;\r\n            \r\n        case 2: // Hide\r\n            toggleVisibility(wrapper, !shouldApply);\r\n            if (!shouldApply) {\r\n            }\r\n            break;\r\n            \r\n        case 3: // Enable\r\n            toggleDisabled(element, !shouldApply);\r\n            break;\r\n            \r\n        case 4: // Disable\r\n            toggleDisabled(element, shouldApply);\r\n            break;\r\n            \r\n        case 5: // ClearValue\r\n            if (shouldApply) {\r\n                clearElementValue(element);\r\n            }\r\n            break;\r\n            \r\n        case 6: // SetValue\r\n            if (shouldApply && dependency.setValue) {\r\n                setElementValue(element, dependency.setValue);\r\n            }\r\n            break;\r\n            \r\n        default:\r\n            console.warn(`Unsupported action: ${action}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Reinitialize a GCDS component without cloning\r\n */\r\nconst reinitializeGCDSComponent = (element) => {\r\n    if (!element || !element.tagName.toLowerCase().startsWith('gcds-')) return;\r\n    try {\r\n        // First check if element is in the DOM\r\n        if (!element.parentNode) {\r\n            console.warn('Cannot reinitialize detached element:', element);\r\n            return;\r\n        }\r\n\r\n        // Store current state\r\n        const currentValue = getGCDSValue(element);\r\n        const isRequired = element.hasAttribute('required');\r\n        const isDisabled = element.hasAttribute('disabled');\r\n\r\n        // Create and configure clone\r\n        const clone = element.cloneNode(true);\r\n        \r\n        // Copy the current state to the clone\r\n        if (isRequired) clone.setAttribute('required', '');\r\n        if (isDisabled) clone.setAttribute('disabled', '');\r\n        \r\n        // Replace the element\r\n        element.parentNode.replaceChild(clone, element);\r\n\r\n        // Ensure the value is properly set after reinitialization\r\n        if (currentValue !== null && currentValue !== undefined) {\r\n            setTimeout(() => {\r\n                setElementValue(clone, currentValue);\r\n            }, 0);\r\n        }\r\n\r\n        return clone; // Return the new element for reference\r\n    } catch (error) {\r\n        console.error('Error reinitializing GCDS component:', error);\r\n    }\r\n};\r\n\r\n/**\r\n * Find the form group wrapper for an element\r\n */\r\nconst findFormGroupWrapper = (element) => {\r\n    // First try to find the closest form group\r\n    const formGroup = element.closest('.gc-form-group');\r\n    if (formGroup) return formGroup;\r\n    \r\n    // If element is or is inside a fieldset, return the fieldset's form group\r\n    const fieldset = element.closest('gcds-fieldset') || \r\n                    (element.tagName.toLowerCase() === 'gcds-fieldset' ? element : null);\r\n    if (fieldset) {\r\n        return fieldset.closest('.gc-form-group') || fieldset.parentElement || element;\r\n    }\r\n    \r\n    // Fallback to original behavior\r\n    return element.parentElement || element;\r\n};\r\n\r\n/**\r\n * Toggle element visibility using classes instead of inline styles\r\n */\r\nconst toggleVisibility = (element, show) => {\r\n    if (!element) return;\r\n    \r\n    if (show) {\r\n        element.classList.remove('gc-form-hidden');\r\n        // Reinitialize GCDS components when showing\r\n        element.querySelectorAll('[class^=\"gcds-\"]').forEach(gcdsElement => {\r\n            reinitializeGCDSComponent(gcdsElement);\r\n        });\r\n    } else {\r\n        element.classList.add('gc-form-hidden');\r\n    }\r\n};\r\n\r\n/**\r\n * Toggle element disabled state\r\n */\r\nconst toggleDisabled = (element, disabled) => {\r\n    if (element.disabled !== disabled) {\r\n        element.disabled = disabled;\r\n        element.setAttribute('aria-disabled', disabled);\r\n    }\r\n};\r\n\r\n/**\r\n * Set required state for an element\r\n */\r\nconst setRequired = (element, required) => {\r\n    if (!element) return;\r\n    try {\r\n        const clone = element.cloneNode(true);\r\n\r\n        clone.removeAttribute('error-message');\r\n\r\n        if (clone.tagName.toLowerCase().startsWith('gcds-')) {\r\n            if (required) {\r\n                clone.setAttribute('required', '');\r\n            } else {\r\n                clone.removeAttribute('required');\r\n            }\r\n        } else {\r\n            // For native elements\r\n            clone.required = required;\r\n            if (required) {\r\n                clone.setAttribute('required', '');\r\n            } else {\r\n                clone.removeAttribute('required');\r\n            }\r\n        }\r\n\r\n        element.parentNode.replaceChild(clone, element);\r\n\r\n    } catch (error) {\r\n        console.warn('Error setting required state:', error);\r\n    }\r\n};\r\n\r\n/**\r\n * Clear the value of an element\r\n */\r\nconst clearElementValue = (element) => {\r\n    if (element.type === 'checkbox' || element.type === 'radio') {\r\n        element.checked = false;\r\n    } else {\r\n        element.value = '';\r\n    }\r\n    triggerChangeEvent(element);\r\n};\r\n\r\n/**\r\n * Set the value of an element\r\n */\r\nconst setElementValue = (element, value) => {\r\n    if (element.type === 'checkbox' || element.type === 'radio') {\r\n        element.checked = value === true || value === 'true';\r\n    } else {\r\n        element.value = value;\r\n    }\r\n    triggerChangeEvent(element);\r\n};\r\n","document.addEventListener(\"DOMContentLoaded\", () => {\r\n    initializeValidation();\r\n});\r\n\r\n/**\r\n * Initialize validation for all form elements with validation rules\r\n */\r\nconst initializeValidation = () => {\r\n    // Find all elements with validation rules\r\n    document.querySelectorAll('[data-validation-rules]').forEach(element => {\r\n        const rules = JSON.parse(element.getAttribute('data-validation-rules'));\r\n        \r\n        // Set up blur event handler if validate-on-blur is present\r\n        if (element.hasAttribute('validate-on-blur')) {\r\n            element.addEventListener('blur', () => validateElement(element));\r\n        }\r\n\r\n        // Set up form submit validation\r\n        const form = element.closest('form');\r\n        if (form) {\r\n            if (!form.hasAttribute('validation-initialized')) {\r\n                form.addEventListener('submit', (event) => validateForm(event));\r\n                form.setAttribute('validation-initialized', 'true');\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Validate a single form element\r\n */\r\nconst validateElement = (element) => {\r\n    const rules = JSON.parse(element.getAttribute('data-validation-rules'));\r\n    const value = getGCDSValue(element);\r\n    const language = element.getAttribute('lang') || 'en';\r\n    let isValid = true;\r\n    let errorMessage = '';\r\n\r\n    for (const rule of rules) {\r\n        if (!validateRule(rule, value)) {\r\n            isValid = false;\r\n            errorMessage = rule.errorMessages[language.toLowerCase()] || \r\n                         rule.errorMessages['en'] || \r\n                         'Invalid value';\r\n            break;\r\n        }\r\n    }\r\n\r\n    updateElementValidation(element, isValid, errorMessage);\r\n    return isValid;\r\n};\r\n\r\n/**\r\n * Validate all form elements on submit\r\n */\r\nconst validateForm = (event) => {\r\n    const form = event.target;\r\n    let isValid = true;\r\n\r\n    form.querySelectorAll('[data-validation-rules]').forEach(element => {\r\n        if (!validateElement(element)) {\r\n            isValid = false;\r\n        }\r\n    });\r\n\r\n    if (!isValid) {\r\n        event.preventDefault();\r\n        // Focus the first invalid element\r\n        const firstInvalid = form.querySelector('.gcds-form-error');\r\n        if (firstInvalid) {\r\n            firstInvalid.focus();\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Validate a single rule against a value\r\n */\r\nconst validateRule = (rule, value) => {\r\n    if (!value && rule.type !== 'required') return true;\r\n\r\n    switch (rule.type) {\r\n        case 'required':\r\n            return value !== null && value !== undefined && value !== '';\r\n        case 'regex':\r\n            return new RegExp(rule.pattern).test(value);\r\n        case 'email':\r\n            return /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(value);\r\n        case 'minlength':\r\n            return value.length >= rule.min;\r\n        case 'maxlength':\r\n            return value.length <= rule.max;\r\n        case 'minvalue':\r\n            return parseFloat(value) >= rule.min;\r\n        case 'maxvalue':\r\n            return parseFloat(value) <= rule.max;\r\n        default:\r\n            return true;\r\n    }\r\n};\r\n\r\n/**\r\n * Update element validation state and error message\r\n */\r\nconst updateElementValidation = (element, isValid, errorMessage) => {\r\n    // Remove existing error state\r\n    element.classList.remove('gcds-form-error');\r\n    const existingError = element.nextElementSibling;\r\n    if (existingError?.classList.contains('gcds-error-message')) {\r\n        existingError.remove();\r\n    }\r\n\r\n    if (!isValid) {\r\n        // Add error state\r\n        element.classList.add('gcds-form-error');\r\n        const errorElement = document.createElement('div');\r\n        errorElement.className = 'gcds-error-message';\r\n        errorElement.textContent = errorMessage;\r\n        element.parentNode.insertBefore(errorElement, element.nextSibling);\r\n    }\r\n};\r\n\r\n/**\r\n * Get the value from a GCDS component\r\n */\r\nconst getGCDSValue = (element) => {\r\n    if (!element) return null;\r\n\r\n    // Handle different GCDS component types\r\n    switch (element.tagName.toLowerCase()) {\r\n        case 'gcds-input':\r\n        case 'gcds-select':\r\n        case 'gcds-textarea':\r\n            return element.value;\r\n        case 'gcds-checkbox':\r\n            return element.checked;\r\n        case 'gcds-radio':\r\n            return element.checked ? element.value : null;\r\n        default:\r\n            return element.value;\r\n    }\r\n}; ","document.addEventListener(\"DOMContentLoaded\", function () {\r\n\r\n    document.querySelectorAll('.fdcp-page-header--has-bg[data-bg-src]').forEach(function (el) {\r\n        var src = el.getAttribute('data-bg-src');\r\n        if (src) {\r\n            el.style.backgroundImage = 'url(' + src + ')';\r\n        }\r\n    });\r\n});"]}