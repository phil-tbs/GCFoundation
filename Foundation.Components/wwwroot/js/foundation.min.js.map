{"version":3,"sources":["components/fdcp-datatable.js","SessionManagement.js","components/fdcp-FilterBox.js","components/fdcp-formBuilder.js","components/fdcp-formValidation.js","components/fdcp-page-heading.js"],"names":["debounce","func","wait","timeout","_this","this","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","apply","document","addEventListener","bootstrapModal","timer","reminder","refreshUrl","logoutUrl","countdownElement","reminderTimeout","countdownInterval","secondsRemaining","startReminderTimer","startCountdown","logoutBtn","sessionModalElement","getElementById","bootstrap","Modal","parseInt","dataset","sessionTimeout","reminderTime","refresh","clearInterval","event","CustomEvent","detail","remainingTime","window","dispatchEvent","show","textContent","concat","setInterval","location","href","refreshBtn","querySelector","fetch","method","credentials","then","hide","querySelectorAll","forEach","el","config","layout","pagination","paginationSize","columns","height","JSON","parse","e","console","error","set","data","ajaxurl","ajaxURL","filterMode","sortMode","ajaxConfig","ajaxContentType","paginationMode","Tabulator","tabulatorId","target","table","findTable","value","trim","clearFilter","log","getColumns","fields","filter","col","getDefinition","map","getField","setFilter","field","type","button","targetId","getAttribute","isExpanded","setAttribute","toString","classList","toggle","initializeDependencies","dependencyMap","Map","dependency","sourceId","sourceQuestionId","has","get","push","dependencyList","currentValue","sourceElement","getGCDSValue","_ref","shouldApply","targetElement","evaluateCondition","applyDependencyAction","action","warn","_ref2","element","tagName","toLowerCase","name","fieldset","closest","from","cb","checkboxes","checked","checkedRadio","triggerValue","String","wrapper","findFormGroupWrapper","setRequired","toggleVisibility","toggleDisabled","clearElementValue","setValue","setElementValue","reinitializeGCDSComponent","startsWith","isRequired","isDisabled","clone","parentNode","hasAttribute","cloneNode","replaceChild","formGroup","parentElement","remove","gcdsElement","add","disabled","required","removeAttribute","triggerChangeEvent","initializeValidation","validateElement","form","validateForm","_step","rules","language","isValid","errorMessage","_iterator","_createForOfIteratorHelper","s","n","done","rule","validateRule","errorMessages","err","f","updateElementValidation","preventDefault","firstInvalid","focus","RegExp","pattern","test","min","max","parseFloat","existingError","nextElementSibling","contains","errorElement","createElement","className","insertBefore","nextSibling","src","style","backgroundImage"],"mappings":"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","file":"foundation.min.js","sourcesContent":["document.querySelectorAll('.tabulator-table').forEach(el => {\r\n    const config = {\r\n        layout: el.dataset.layout || \"fitColumns\",\r\n        pagination: true,\r\n        paginationSize: parseInt(el.dataset.paginationSize || \"10\"),\r\n        columns: [],\r\n        height: '100%'\r\n    };\r\n\r\n    // Parse columns\r\n    if (el.dataset.columns) {\r\n        try {\r\n            config.columns = JSON.parse(el.dataset.columns);\r\n        } catch (e) {\r\n            console.error(\"Failed to parse columns:\", e);\r\n        }\r\n    }\r\n\r\n    if (el.dataset.set) {\r\n        config.data = JSON.parse(el.dataset.set);\r\n    } else if (el.dataset.ajaxurl) {\r\n        config.ajaxURL = el.dataset.ajaxurl;\r\n        config.filterMode = \"remote\";\r\n        config.sortMode = \"remote\";\r\n        config.ajaxConfig = \"POST\";\r\n        config.ajaxContentType = \"json\";\r\n        config.paginationMode = \"remote\";\r\n        config.filterMode = \"remote\";\r\n    }\r\n\r\n\r\n    new Tabulator(el, config);\r\n});\r\n\r\ndocument.querySelectorAll('.tabulator-search-input').forEach(el => {\r\n    el.addEventListener(\"input\", debounce(function (e) {\r\n        let tabulatorId = e.target.dataset.tabulatorId;\r\n        let table = Tabulator.findTable(\"#\" + tabulatorId)[0];\r\n        const value = e.target.value.trim();\r\n\r\n        if (!table) return;\r\n\r\n        if (value === \"\") {\r\n            table.clearFilter();\r\n        } else {\r\n            console.log(table.getColumns());\r\n            const fields = table.getColumns()\r\n                .filter(col => {\r\n                    const def = col.getDefinition();\r\n                    return def.filter; // Only fields with headerFilter enabled\r\n                })\r\n                .map(col => col.getField());\r\n\r\n\r\n            table.setFilter(\r\n                fields.map(field => ({ field: field, type: \"like\", value: value }))\r\n            );\r\n        }\r\n    }, 200)); // 200ms debounce\r\n});\r\n\r\nfunction debounce(func, wait) {\r\n    let timeout;\r\n    return function (...args) {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => func.apply(this, args), wait);\r\n    };\r\n}\r\n","document.addEventListener(\"DOMContentLoaded\", () => {\r\n    const sessionModalElement = document.getElementById('session-extend-modal');\r\n\r\n    if (!sessionModalElement) return;\r\n\r\n    const bootstrapModal = new bootstrap.Modal(sessionModalElement);\r\n    const timer = parseInt(sessionModalElement.dataset.sessionTimeout, 10);\r\n    const reminder = parseInt(sessionModalElement.dataset.reminderTime, 10);\r\n    const refreshUrl = sessionModalElement.dataset.refresh;\r\n    const logoutUrl = sessionModalElement.dataset.logoutUrl;\r\n\r\n    const countdownElement = document.getElementById('session-countdown');\r\n\r\n    let reminderTimeout;\r\n    let countdownInterval;\r\n    let secondsRemaining;\r\n\r\n    const startReminderTimer = () => {\r\n        // Clear existing timers\r\n        clearTimeout(reminderTimeout);\r\n        clearInterval(countdownInterval);\r\n\r\n        const reminderTimeInMs = (timer - reminder) * 60 * 1000;\r\n\r\n        reminderTimeout = setTimeout(() => {\r\n            const event = new CustomEvent(\"foundation:session-reminder\", {\r\n                detail: { remainingTime: reminder * 60 }\r\n            });\r\n            window.dispatchEvent(event);\r\n\r\n            secondsRemaining = reminder * 60;\r\n            bootstrapModal.show();\r\n            startCountdown();\r\n        }, reminderTimeInMs);\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        if (!countdownElement) return;\r\n\r\n        countdownElement.textContent = `${secondsRemaining}s`;\r\n\r\n        countdownInterval = setInterval(() => {\r\n            secondsRemaining--;\r\n\r\n            if (secondsRemaining <= 0) {\r\n                clearInterval(countdownInterval);\r\n                window.location.href = logoutUrl;\r\n            } else {\r\n                countdownElement.textContent = `${secondsRemaining}s`;\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    const refreshBtn = document.querySelector('[button-id=\"session-extend-refresh-btn\"]');\r\n    const logoutBtn = document.querySelector('[button-id=\"session-extend-logout-btn\"]');\r\n\r\n    if (refreshBtn) {\r\n        refreshBtn.addEventListener(\"click\", () => {\r\n            fetch(refreshUrl, {\r\n                method: 'POST',\r\n                credentials: 'include'\r\n            }).then(() => {\r\n                bootstrapModal.hide();\r\n                startReminderTimer(); // Reset everything\r\n            });\r\n        });\r\n    }\r\n\r\n    if (logoutBtn) {\r\n        logoutBtn.addEventListener(\"click\", () => {\r\n            window.location.href = logoutUrl;\r\n        });\r\n    }\r\n\r\n    // Kick off the first reminder timer\r\n    startReminderTimer();\r\n});","document.addEventListener('DOMContentLoaded', function () {\r\n    document.querySelectorAll('[data-fdcp-collapse-toggle]').forEach(button => {\r\n        button.addEventListener('click', function () {\r\n            const targetId = this.getAttribute('data-fdcp-collapse-toggle');\r\n            const target = document.getElementById(targetId);\r\n\r\n            const isExpanded = this.getAttribute('aria-expanded') === 'true';\r\n            this.setAttribute('aria-expanded', (!isExpanded).toString());\r\n\r\n            if (target) {\r\n                target.classList.toggle('fdcp-show', !isExpanded);\r\n            }\r\n        });\r\n    });\r\n});","document.addEventListener(\"DOMContentLoaded\", () => {\r\n    initializeDependencies();\r\n});\r\n\r\n/**\r\n * Initialize all form elements with dependencies\r\n */\r\nconst initializeDependencies = () => {\r\n    // Create a map of source elements to their dependencies\r\n    const dependencyMap = new Map();\r\n\r\n    // First pass: collect all dependencies and organize them by source\r\n    document.querySelectorAll('[data-dependencies]').forEach(function (el) {\r\n        try {\r\n            const dependencies = JSON.parse(el.getAttribute('data-dependencies'));\r\n            dependencies.forEach(dependency => {\r\n                const sourceId = dependency.sourceQuestionId;\r\n                if (!dependencyMap.has(sourceId)) {\r\n                    dependencyMap.set(sourceId, []);\r\n                }\r\n                // Store the target ID instead of the element reference\r\n                dependencyMap.get(sourceId).push({\r\n                    targetId: el.getAttribute('input-id') || \r\n                             el.getAttribute('select-id') || \r\n                             el.getAttribute('textarea-id') || \r\n                             el.getAttribute('radio-id') || \r\n                             el.getAttribute('checkbox-id') || \r\n                             el.getAttribute('id'),\r\n                    dependency: dependency\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.error('Error parsing dependencies:', error);\r\n        }\r\n    });\r\n\r\n    // Second pass: set up event listeners on source elements\r\n    dependencyMap.forEach((dependencyList, sourceId) => {\r\n        // Find the source element\r\n        const sourceElement = document.querySelector(`\r\n            [input-id=\"${sourceId}\"],\r\n            [select-id=\"${sourceId}\"],\r\n            [textarea-id=\"${sourceId}\"],\r\n            [id=\"${sourceId}\"],\r\n            [fieldset-id=\"${sourceId}\"]\r\n        `);\r\n\r\n        if (!sourceElement) {\r\n            console.warn(`Source element ${sourceId} not found for dependencies`);\r\n            return;\r\n        }\r\n\r\n        // Initial evaluation for all dependencies\r\n        const currentValue = getGCDSValue(sourceElement);\r\n        dependencyList.forEach(({ targetId, dependency }) => {\r\n            // Find the current element in the DOM\r\n            const targetElement = document.querySelector(`\r\n                [input-id=\"${targetId}\"],\r\n                [select-id=\"${targetId}\"],\r\n                [textarea-id=\"${targetId}\"],\r\n                [radio-id=\"${targetId}\"],\r\n                [checkbox-id=\"${targetId}\"],\r\n                [id=\"${targetId}\"]\r\n            `);\r\n\r\n            if (!targetElement) {\r\n                console.warn(`Target element with ID ${targetId} not found`);\r\n                return;\r\n            }\r\n\r\n            const shouldApply = evaluateCondition(dependency, currentValue);\r\n            applyDependencyAction(targetElement, dependency.action, shouldApply, dependency);\r\n        });\r\n\r\n        // Set up event listeners\r\n        sourceElement.addEventListener(\"gcdsChange\", (event) => {\r\n            \r\n            const value = event.detail;\r\n            \r\n            dependencyList.forEach(({ targetId, dependency }) => {\r\n                // Find the current element in the DOM\r\n                const targetElement = document.querySelector(`\r\n                    [input-id=\"${targetId}\"],\r\n                    [select-id=\"${targetId}\"],\r\n                    [textarea-id=\"${targetId}\"],\r\n                    [radio-id=\"${targetId}\"],\r\n                    [checkbox-id=\"${targetId}\"],\r\n                    [id=\"${targetId}\"]\r\n                `);\r\n\r\n                if (!targetElement) {\r\n                    console.warn(`Target element with ID ${targetId} not found`);\r\n                    return;\r\n                }\r\n\r\n                const shouldApply = evaluateCondition(dependency, value);\r\n                applyDependencyAction(targetElement, dependency.action, shouldApply, dependency);\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Get the value from a GCDS component\r\n */\r\nconst getGCDSValue = (element) => {\r\n    if (!element) return null;\r\n\r\n    // Handle different GCDS component types\r\n    switch (element.tagName.toLowerCase()) {\r\n        case 'gcds-input':\r\n        case 'gcds-select':\r\n        case 'gcds-textarea':\r\n            return element.value;\r\n        case 'gcds-checkbox':\r\n            if (element.name) {\r\n                const fieldset = element.closest('gcds-fieldset');\r\n                if (fieldset) {\r\n                    return Array.from(fieldset.querySelectorAll('gcds-checkbox:checked'))\r\n                        .map(cb => cb.value);\r\n                }\r\n                const checkboxes = document.querySelectorAll(`gcds-checkbox[name=\"${element.name}\"]:checked`);\r\n                return Array.from(checkboxes).map(cb => cb.value);\r\n            }\r\n            return element.checked;\r\n        case 'gcds-radio':\r\n            const checkedRadio = document.querySelector(`gcds-radio[name=\"${element.name}\"]:checked`);\r\n            return checkedRadio ? checkedRadio.value : null;\r\n        default:\r\n            return element.value;\r\n    }\r\n};\r\n\r\n/**\r\n * Evaluate if a dependency condition is met\r\n */\r\nconst evaluateCondition = (dependency, currentValue) => {\r\n    const triggerValue = dependency.triggerValue;\r\n    // Default to equals comparison since we don't have condition in the model anymore\r\n    return String(currentValue) === String(triggerValue);\r\n};\r\n\r\n/**\r\n * Apply the dependency action to the target element\r\n */\r\nconst applyDependencyAction = (element, action, shouldApply, dependency) => {\r\n    let wrapper = findFormGroupWrapper(element);\r\n\r\n    switch (action) {\r\n        case 0: // Require\r\n            setRequired(element, shouldApply);\r\n            break;\r\n            \r\n        case 1: // Show\r\n            toggleVisibility(wrapper, shouldApply);\r\n            if (shouldApply) {\r\n            }\r\n            break;\r\n            \r\n        case 2: // Hide\r\n            toggleVisibility(wrapper, !shouldApply);\r\n            if (!shouldApply) {\r\n            }\r\n            break;\r\n            \r\n        case 3: // Enable\r\n            toggleDisabled(element, !shouldApply);\r\n            break;\r\n            \r\n        case 4: // Disable\r\n            toggleDisabled(element, shouldApply);\r\n            break;\r\n            \r\n        case 5: // ClearValue\r\n            if (shouldApply) {\r\n                clearElementValue(element);\r\n            }\r\n            break;\r\n            \r\n        case 6: // SetValue\r\n            if (shouldApply && dependency.setValue) {\r\n                setElementValue(element, dependency.setValue);\r\n            }\r\n            break;\r\n            \r\n        default:\r\n            console.warn(`Unsupported action: ${action}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Reinitialize a GCDS component without cloning\r\n */\r\nconst reinitializeGCDSComponent = (element) => {\r\n    if (!element || !element.tagName.toLowerCase().startsWith('gcds-')) return;\r\n    try {\r\n        // First check if element is in the DOM\r\n        if (!element.parentNode) {\r\n            console.log(element);\r\n            console.warn('Cannot reinitialize detached element:', element);\r\n            return;\r\n        }\r\n\r\n        // Store current state\r\n        const currentValue = getGCDSValue(element);\r\n        const isRequired = element.hasAttribute('required');\r\n        const isDisabled = element.hasAttribute('disabled');\r\n\r\n        // Create and configure clone\r\n        const clone = element.cloneNode(true);\r\n        \r\n        // Copy the current state to the clone\r\n        if (isRequired) clone.setAttribute('required', '');\r\n        if (isDisabled) clone.setAttribute('disabled', '');\r\n        \r\n        // Replace the element\r\n        element.parentNode.replaceChild(clone, element);\r\n\r\n        // Ensure the value is properly set after reinitialization\r\n        if (currentValue !== null && currentValue !== undefined) {\r\n            setTimeout(() => {\r\n                setElementValue(clone, currentValue);\r\n            }, 0);\r\n        }\r\n\r\n        return clone; // Return the new element for reference\r\n    } catch (error) {\r\n        console.error('Error reinitializing GCDS component:', error);\r\n    }\r\n};\r\n\r\n/**\r\n * Find the form group wrapper for an element\r\n */\r\nconst findFormGroupWrapper = (element) => {\r\n    // First try to find the closest form group\r\n    const formGroup = element.closest('.gc-form-group');\r\n    if (formGroup) return formGroup;\r\n    \r\n    // If element is or is inside a fieldset, return the fieldset's form group\r\n    const fieldset = element.closest('gcds-fieldset') || \r\n                    (element.tagName.toLowerCase() === 'gcds-fieldset' ? element : null);\r\n    if (fieldset) {\r\n        return fieldset.closest('.gc-form-group') || fieldset.parentElement || element;\r\n    }\r\n    \r\n    // Fallback to original behavior\r\n    return element.parentElement || element;\r\n};\r\n\r\n/**\r\n * Toggle element visibility using classes instead of inline styles\r\n */\r\nconst toggleVisibility = (element, show) => {\r\n    if (!element) return;\r\n    \r\n    if (show) {\r\n        element.classList.remove('gc-form-hidden');\r\n        // Reinitialize GCDS components when showing\r\n        element.querySelectorAll('[class^=\"gcds-\"]').forEach(gcdsElement => {\r\n            reinitializeGCDSComponent(gcdsElement);\r\n        });\r\n    } else {\r\n        element.classList.add('gc-form-hidden');\r\n    }\r\n};\r\n\r\n/**\r\n * Toggle element disabled state\r\n */\r\nconst toggleDisabled = (element, disabled) => {\r\n    if (element.disabled !== disabled) {\r\n        element.disabled = disabled;\r\n        element.setAttribute('aria-disabled', disabled);\r\n    }\r\n};\r\n\r\n/**\r\n * Set required state for an element\r\n */\r\nconst setRequired = (element, required) => {\r\n    if (!element) return;\r\n    try {\r\n        const clone = element.cloneNode(true);\r\n\r\n        clone.removeAttribute('error-message');\r\n\r\n        if (clone.tagName.toLowerCase().startsWith('gcds-')) {\r\n            if (required) {\r\n                clone.setAttribute('required', '');\r\n            } else {\r\n                clone.removeAttribute('required');\r\n            }\r\n        } else {\r\n            // For native elements\r\n            clone.required = required;\r\n            if (required) {\r\n                clone.setAttribute('required', '');\r\n            } else {\r\n                clone.removeAttribute('required');\r\n            }\r\n        }\r\n\r\n        element.parentNode.replaceChild(clone, element);\r\n\r\n    } catch (error) {\r\n        console.warn('Error setting required state:', error);\r\n    }\r\n};\r\n\r\n/**\r\n * Clear the value of an element\r\n */\r\nconst clearElementValue = (element) => {\r\n    if (element.type === 'checkbox' || element.type === 'radio') {\r\n        element.checked = false;\r\n    } else {\r\n        element.value = '';\r\n    }\r\n    triggerChangeEvent(element);\r\n};\r\n\r\n/**\r\n * Set the value of an element\r\n */\r\nconst setElementValue = (element, value) => {\r\n    if (element.type === 'checkbox' || element.type === 'radio') {\r\n        element.checked = value === true || value === 'true';\r\n    } else {\r\n        element.value = value;\r\n    }\r\n    triggerChangeEvent(element);\r\n};\r\n","document.addEventListener(\"DOMContentLoaded\", () => {\r\n    initializeValidation();\r\n});\r\n\r\n/**\r\n * Initialize validation for all form elements with validation rules\r\n */\r\nconst initializeValidation = () => {\r\n    // Find all elements with validation rules\r\n    document.querySelectorAll('[data-validation-rules]').forEach(element => {\r\n        const rules = JSON.parse(element.getAttribute('data-validation-rules'));\r\n        \r\n        // Set up blur event handler if validate-on-blur is present\r\n        if (element.hasAttribute('validate-on-blur')) {\r\n            element.addEventListener('blur', () => validateElement(element));\r\n        }\r\n\r\n        // Set up form submit validation\r\n        const form = element.closest('form');\r\n        if (form) {\r\n            if (!form.hasAttribute('validation-initialized')) {\r\n                form.addEventListener('submit', (event) => validateForm(event));\r\n                form.setAttribute('validation-initialized', 'true');\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Validate a single form element\r\n */\r\nconst validateElement = (element) => {\r\n    const rules = JSON.parse(element.getAttribute('data-validation-rules'));\r\n    const value = getGCDSValue(element);\r\n    const language = element.getAttribute('lang') || 'en';\r\n    let isValid = true;\r\n    let errorMessage = '';\r\n\r\n    for (const rule of rules) {\r\n        if (!validateRule(rule, value)) {\r\n            isValid = false;\r\n            errorMessage = rule.errorMessages[language.toLowerCase()] || \r\n                         rule.errorMessages['en'] || \r\n                         'Invalid value';\r\n            break;\r\n        }\r\n    }\r\n\r\n    updateElementValidation(element, isValid, errorMessage);\r\n    return isValid;\r\n};\r\n\r\n/**\r\n * Validate all form elements on submit\r\n */\r\nconst validateForm = (event) => {\r\n    const form = event.target;\r\n    let isValid = true;\r\n\r\n    form.querySelectorAll('[data-validation-rules]').forEach(element => {\r\n        if (!validateElement(element)) {\r\n            isValid = false;\r\n        }\r\n    });\r\n\r\n    if (!isValid) {\r\n        event.preventDefault();\r\n        // Focus the first invalid element\r\n        const firstInvalid = form.querySelector('.gcds-form-error');\r\n        if (firstInvalid) {\r\n            firstInvalid.focus();\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Validate a single rule against a value\r\n */\r\nconst validateRule = (rule, value) => {\r\n    if (!value && rule.type !== 'required') return true;\r\n\r\n    switch (rule.type) {\r\n        case 'required':\r\n            return value !== null && value !== undefined && value !== '';\r\n        case 'regex':\r\n            return new RegExp(rule.pattern).test(value);\r\n        case 'email':\r\n            return /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(value);\r\n        case 'minlength':\r\n            return value.length >= rule.min;\r\n        case 'maxlength':\r\n            return value.length <= rule.max;\r\n        case 'minvalue':\r\n            return parseFloat(value) >= rule.min;\r\n        case 'maxvalue':\r\n            return parseFloat(value) <= rule.max;\r\n        default:\r\n            return true;\r\n    }\r\n};\r\n\r\n/**\r\n * Update element validation state and error message\r\n */\r\nconst updateElementValidation = (element, isValid, errorMessage) => {\r\n    // Remove existing error state\r\n    element.classList.remove('gcds-form-error');\r\n    const existingError = element.nextElementSibling;\r\n    if (existingError?.classList.contains('gcds-error-message')) {\r\n        existingError.remove();\r\n    }\r\n\r\n    if (!isValid) {\r\n        // Add error state\r\n        element.classList.add('gcds-form-error');\r\n        const errorElement = document.createElement('div');\r\n        errorElement.className = 'gcds-error-message';\r\n        errorElement.textContent = errorMessage;\r\n        element.parentNode.insertBefore(errorElement, element.nextSibling);\r\n    }\r\n};\r\n\r\n/**\r\n * Get the value from a GCDS component\r\n */\r\nconst getGCDSValue = (element) => {\r\n    if (!element) return null;\r\n\r\n    // Handle different GCDS component types\r\n    switch (element.tagName.toLowerCase()) {\r\n        case 'gcds-input':\r\n        case 'gcds-select':\r\n        case 'gcds-textarea':\r\n            return element.value;\r\n        case 'gcds-checkbox':\r\n            return element.checked;\r\n        case 'gcds-radio':\r\n            return element.checked ? element.value : null;\r\n        default:\r\n            return element.value;\r\n    }\r\n}; ","document.addEventListener(\"DOMContentLoaded\", function () {\r\n\r\n    document.querySelectorAll('.fdcp-page-header--has-bg[data-bg-src]').forEach(function (el) {\r\n        var src = el.getAttribute('data-bg-src');\r\n        if (src) {\r\n            el.style.backgroundImage = 'url(' + src + ')';\r\n        }\r\n    });\r\n});"]}