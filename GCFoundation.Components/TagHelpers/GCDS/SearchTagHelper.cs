using GCFoundation.Components.Enums;
using Microsoft.AspNetCore.Razor.TagHelpers;

namespace GCFoundation.Components.TagHelpers.GCDS
{
    /// <summary>
    /// A TagHelper that renders a GC Design System search component as a <c>&lt;gcds-search&gt;</c> element.
    /// The search component is used to create a search input field with customizable action, method, and other options.
    /// </summary>
    [HtmlTargetElement("gcds-search")]
    public class SearchTagHelper : BaseTagHelper
    {
        /// <summary>
        /// Gets or sets the URL to which the search form will be submitted. This is typically a search endpoint.
        /// </summary>
        public required string Action { get; set; }

        /// <summary>
        /// Gets or sets the HTTP method to use for submitting the search form. Default is <see cref="SearchMethod.Get"/>.
        /// </summary>
        public SearchMethod Method { get; set; } = SearchMethod.Get;

        /// <summary>
        /// Gets or sets the name of the search input field. This name is used when submitting the form.
        /// </summary>
        public required string Name { get; set; }

        /// <summary>
        /// Gets or sets the placeholder text for the search input field. Default is "Canada.ca".
        /// </summary>
        public string? Placeholder { get; set; } = "Canada.ca";

        /// <summary>
        /// Gets or sets the ID of the search input field. Default is "search".
        /// </summary>
        public required string SearchId { get; set; } = "search";

        /// <summary>
        /// Processes the <c>gcds-search</c> element by adding the <c>action</c>, <c>lang</c>, <c>method</c>,
        /// <c>name</c>, <c>placeholder</c>, and <c>search-id</c> attributes to the rendered output.
        /// </summary>
        /// <param name="context">The context for the tag helper.</param>
        /// <param name="output">The HTML element output generated by the tag helper.</param>
        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            AddAttributeIfNotNull(output, "action", Action);
            AddAttributeIfNotNull(output, "lang", Lang);
            AddAttributeIfNotNull(output, "method", Method);
            AddAttributeIfNotNull(output, "name", Name);
            AddAttributeIfNotNull(output, "placeholder", Placeholder);
            AddAttributeIfNotNull(output, "search-id", SearchId);
            base.Process(context, output);
        }

    }
}
