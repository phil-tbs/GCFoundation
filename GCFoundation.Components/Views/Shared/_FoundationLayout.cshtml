@using GCFoundation.Common.Settings
@using GCFoundation.Common.Utilities
@using GCFoundation.Components.Helpers
@using GCFoundation.Components.Setttings
@using GCFoundation.Components.Enums
@using Microsoft.AspNetCore.Routing
@using Microsoft.Extensions.Options
@using cloudscribe.Web.Navigation

@inject IOptions<GCFoundationComponentsSettings> settings;
@inject IOptions<GCFoundationSessionSetting> sessionSetting;

<!DOCTYPE html>
<html lang="@LanguageUtility.GetCurrentApplicationLanguage()">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    @* Global meta tags from configuration *@
    @foreach (var metaTag in settings.Value.GlobalMetaTags)
    {
        @Html.Raw(metaTag)
    }
    
    @await RenderSectionAsync("Metas", required: false)
    
    <title>@ViewData["Title"] - @settings.Value.ApplicationName</title>
    
    @* Global link tags from configuration *@
    @foreach (var linkTag in settings.Value.GlobalLinkTags)
    {
        @Html.Raw(linkTag)
    }
    
    <link href="@StaticResourceHelper.GetImageResourcePath("favicon.ico")" rel="icon" type="image/x-icon">
    
    @* GCDS CSS from CDN (if enabled) *@
    @if (settings.Value.IncludeGCDSResources)
    {
        <link rel="stylesheet" href="@settings.Value.GCDSCssCDN" />
    }
    
    @* Font Awesome CSS from CDN (if enabled) *@
    @if (settings.Value.IncludeFontAwesome)
    {
        <link rel="stylesheet" href="@settings.Value.FontAwesomeCDN" />
    }
    
    @* Default foundation CSS files (always included) *@
    <link rel="stylesheet" href="@StaticResourceHelper.GetLibResourcePath("tabulator/dist/css/GCTabulatorTheme.css")" />
    <link rel="stylesheet" href="@StaticResourceHelper.GetCssResourcePath("foundation.min.css")" asp-append-version="true" />
    <link rel="stylesheet" href="@StaticResourceHelper.GetLibResourcePath("prism/css/prism.css")" asp-append-version="true" />
    
    @* Global CSS files from configuration *@
    @foreach (var cssFile in settings.Value.GlobalCssFiles)
    {
        if (cssFile.StartsWith("http", StringComparison.OrdinalIgnoreCase))
        {
            <link rel="stylesheet" href="@cssFile" />
        }
        else
        {
            <link rel="stylesheet" href="@cssFile" asp-append-version="true" />
        }
    }
    
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    @{
        RouteValueDictionary routeValueDictionary = new RouteValueDictionary(ViewContext.RouteData.Values);
        routeValueDictionary["culture"] = LanguageUtility.GetOppositeLangauge();
            Language currentLanguage = Language.en;

        if (LanguageUtility.GetCurrentApplicationLanguage() == "fr")
        {
            currentLanguage = Language.fr;
        }
    }
    <gcds-header lang-href="@Url.RouteUrl(routeValueDictionary)" skip-to-herf="#main-content" lang="@currentLanguage">
        @{
            string? menuPartialViewName = ViewData["MenuPartialViewName"] as string;
            string? searchPartialViewName = ViewData["SearchPartialViewName"] as string;
            string? bannerPartialViewName = ViewData["BannerPartialViewName"] as string;
        }

        @* Load a banner view if defined *@
        @if (!string.IsNullOrEmpty(bannerPartialViewName))
        {
            <div slot="banner">
                @await Html.PartialAsync(bannerPartialViewName)
            </div>
        }

        @* Load a menu view if defined *@
        @if (!string.IsNullOrEmpty(menuPartialViewName))
        {
            <div slot="menu">
                @await Html.PartialAsync(menuPartialViewName)
            </div>
        }

        @* Load a search view if defined *@
        @if (!string.IsNullOrEmpty(searchPartialViewName))
        {
            <div slot="search">
                @await Html.PartialAsync(searchPartialViewName)
            </div>
        }

        <div slot="breadcrumb">
            @await Component.InvokeAsync("Navigation", new { viewName = "GCDSBreadcrumbs", filterName = NamedNavigationFilters.Breadcrumbs, startingNodeKey = "" })
        </div>
    </gcds-header>
    <gcds-container id="main-content" size="xl" centered tag="main" main-container class="fdcp-mb-300">
        <partial name="_PageNotification" />
        @* Main content *@
        @RenderBody()
    </gcds-container>

    @* GC Footer *@
    <gcds-footer display="full"></gcds-footer>

    @* Render all modal in that section to make sure to block all content on the page *@
    @await RenderSectionAsync("Modals", required: false)

    @* If the session management is activated  *@
    @if (sessionSetting.Value.UseSession && sessionSetting.Value.UseReminder)
    {
        @await Html.PartialAsync("Modals/_ExtendSessionModal");
    }

    @* GCDS JavaScript from CDN (if enabled) *@
    @if (settings.Value.IncludeGCDSResources)
    {
        <script type="module" src="@settings.Value.GCDSJavaScriptCDN"></script>
    }

    @* Default foundation JavaScript files (always included) *@
    <script src="@StaticResourceHelper.GetLibResourcePath("prism/js/prism.js")" asp-append-version="true"></script>
    <script src="@StaticResourceHelper.GetLibResourcePath("tabulator/dist/js/tabulator.min.js")" asp-append-version="true"></script>
    <script src="@StaticResourceHelper.GetJsResourcePath("foundation.min.js")" asp-append-version="true"></script>

    @* Global JavaScript files from configuration *@
    @foreach (var jsFile in settings.Value.GlobalJavaScriptFiles)
    {
        if (jsFile.StartsWith("http", StringComparison.OrdinalIgnoreCase))
        {
            <script src="@jsFile"></script>
        }
        else
        {
            <script src="@jsFile" asp-append-version="true"></script>
        }
    }
    
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
