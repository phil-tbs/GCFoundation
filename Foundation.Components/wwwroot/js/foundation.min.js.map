{"version":3,"sources":["components/fdcp-datatable.js","SessionManagement.js"],"names":["debounce","func","wait","timeout","_this","this","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","apply","document","addEventListener","bootstrapModal","timer","reminder","refreshUrl","logoutUrl","countdownElement","reminderTimeout","countdownInterval","secondsRemaining","startReminderTimer","startCountdown","logoutBtn","sessionModalElement","getElementById","bootstrap","Modal","parseInt","dataset","sessionTimeout","reminderTime","refresh","clearInterval","event","CustomEvent","detail","remainingTime","window","dispatchEvent","show","textContent","concat","setInterval","location","href","refreshBtn","querySelector","fetch","method","credentials","then","hide","querySelectorAll","forEach","el","config","layout","pagination","paginationSize","columns","height","JSON","parse","e","console","error","set","data","ajaxurl","ajaxURL","filterMode","sortMode","ajaxConfig","ajaxContentType","paginationMode","Tabulator","tabulatorId","target","table","findTable","value","trim","clearFilter","log","getColumns","fields","filter","col","getDefinition","map","getField","setFilter","field","type"],"mappings":"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","file":"foundation.min.js","sourcesContent":["document.querySelectorAll('.tabulator-table').forEach(el => {\r\n    const config = {\r\n        layout: el.dataset.layout || \"fitColumns\",\r\n        pagination: true,\r\n        paginationSize: parseInt(el.dataset.paginationSize || \"10\"),\r\n        columns: [],\r\n        height: '100%'\r\n    };\r\n\r\n    // Parse columns\r\n    if (el.dataset.columns) {\r\n        try {\r\n            config.columns = JSON.parse(el.dataset.columns);\r\n        } catch (e) {\r\n            console.error(\"Failed to parse columns:\", e);\r\n        }\r\n    }\r\n\r\n    if (el.dataset.set) {\r\n        config.data = JSON.parse(el.dataset.set);\r\n    } else if (el.dataset.ajaxurl) {\r\n        config.ajaxURL = el.dataset.ajaxurl;\r\n        config.filterMode = \"remote\";\r\n        config.sortMode = \"remote\";\r\n        config.ajaxConfig = \"POST\";\r\n        config.ajaxContentType = \"json\";\r\n        config.paginationMode = \"remote\";\r\n        config.filterMode = \"remote\";\r\n    }\r\n\r\n\r\n    new Tabulator(el, config);\r\n});\r\n\r\ndocument.querySelectorAll('.tabulator-search-input').forEach(el => {\r\n    el.addEventListener(\"input\", debounce(function (e) {\r\n        let tabulatorId = e.target.dataset.tabulatorId;\r\n        let table = Tabulator.findTable(\"#\" + tabulatorId)[0];\r\n        const value = e.target.value.trim();\r\n\r\n        if (!table) return;\r\n\r\n        if (value === \"\") {\r\n            table.clearFilter();\r\n        } else {\r\n            console.log(table.getColumns());\r\n            const fields = table.getColumns()\r\n                .filter(col => {\r\n                    const def = col.getDefinition();\r\n                    return def.filter; // Only fields with headerFilter enabled\r\n                })\r\n                .map(col => col.getField());\r\n\r\n\r\n            table.setFilter(\r\n                fields.map(field => ({ field: field, type: \"like\", value: value }))\r\n            );\r\n        }\r\n    }, 200)); // 200ms debounce\r\n});\r\n\r\nfunction debounce(func, wait) {\r\n    let timeout;\r\n    return function (...args) {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => func.apply(this, args), wait);\r\n    };\r\n}\r\n","document.addEventListener(\"DOMContentLoaded\", () => {\r\n    const sessionModalElement = document.getElementById('session-extend-modal');\r\n\r\n    if (!sessionModalElement) return;\r\n\r\n    const bootstrapModal = new bootstrap.Modal(sessionModalElement);\r\n    const timer = parseInt(sessionModalElement.dataset.sessionTimeout, 10);\r\n    const reminder = parseInt(sessionModalElement.dataset.reminderTime, 10);\r\n    const refreshUrl = sessionModalElement.dataset.refresh;\r\n    const logoutUrl = sessionModalElement.dataset.logoutUrl;\r\n\r\n    const countdownElement = document.getElementById('session-countdown');\r\n\r\n    let reminderTimeout;\r\n    let countdownInterval;\r\n    let secondsRemaining;\r\n\r\n    const startReminderTimer = () => {\r\n        // Clear existing timers\r\n        clearTimeout(reminderTimeout);\r\n        clearInterval(countdownInterval);\r\n\r\n        const reminderTimeInMs = (timer - reminder) * 60 * 1000;\r\n\r\n        reminderTimeout = setTimeout(() => {\r\n            const event = new CustomEvent(\"foundation:session-reminder\", {\r\n                detail: { remainingTime: reminder * 60 }\r\n            });\r\n            window.dispatchEvent(event);\r\n\r\n            secondsRemaining = reminder * 60;\r\n            bootstrapModal.show();\r\n            startCountdown();\r\n        }, reminderTimeInMs);\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        if (!countdownElement) return;\r\n\r\n        countdownElement.textContent = `${secondsRemaining}s`;\r\n\r\n        countdownInterval = setInterval(() => {\r\n            secondsRemaining--;\r\n\r\n            if (secondsRemaining <= 0) {\r\n                clearInterval(countdownInterval);\r\n                window.location.href = logoutUrl;\r\n            } else {\r\n                countdownElement.textContent = `${secondsRemaining}s`;\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    const refreshBtn = document.querySelector('[button-id=\"session-extend-refresh-btn\"]');\r\n    const logoutBtn = document.querySelector('[button-id=\"session-extend-logout-btn\"]');\r\n\r\n    if (refreshBtn) {\r\n        refreshBtn.addEventListener(\"click\", () => {\r\n            fetch(refreshUrl, {\r\n                method: 'POST',\r\n                credentials: 'include'\r\n            }).then(() => {\r\n                bootstrapModal.hide();\r\n                startReminderTimer(); // Reset everything\r\n            });\r\n        });\r\n    }\r\n\r\n    if (logoutBtn) {\r\n        logoutBtn.addEventListener(\"click\", () => {\r\n            window.location.href = logoutUrl;\r\n        });\r\n    }\r\n\r\n    // Kick off the first reminder timer\r\n    startReminderTimer();\r\n});"]}