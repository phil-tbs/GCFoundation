trigger:
  branches:
    include:
      - master
      - develop

pool: 'TBS Self Hosted'

variables:
  buildConfiguration: 'Release'
  solution: '**/*.sln'
  outputDir: '$(Build.ArtifactStagingDirectory)/nuget'
  nugetSource: 'TBS_Custom_Feed'
  componentsProject: 'GCFoundation.Components/CGFoundation.Components.csproj'
  commonProject: 'GCFoundation.Common/GCFoundation.Common.csproj'
  securityProject: 'GCFoundation.Security/GCFoundation.Security.csproj'

  isMain: $[eq(variables['Build.SourceBranchName'], 'master')]
  versionSuffix: $[iif(eq(variables['isMain'], 'True'), '', '-beta')]


name: 1.0.$(Date:yyyyMMdd)$(Rev:.r)$(versionSuffix)

steps:
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '8.x'

- task: UseNode@1
  inputs:
    version: '22.x'
  displayName: 'Install Node.js'

# Optional: Only if Foundation.Components has a package.json
- task: Npm@1
  displayName: 'Install NPM packages for Foundation.Components'
  inputs:
    command: 'install'
    workingDir: 'GCFoundation.Components'

- task: NuGetToolInstaller@1
  displayName: 'NuGet Tool Installer'

- task: NuGetCommand@2
  displayName: 'Restore NuGet Packages'
  inputs:
    restoreSolution: '$(solution)'

###############################################
# BUILD & PACK: Foundation.Common
###############################################
- task: DotNetCoreCLI@2
  displayName: 'Build GCFoundation.Common'
  inputs:
    command: 'build'
    projects: '$(commonProject)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: 'Pack Foundation.Common'
  condition: ne(variables['Build.Reason'], 'PullRequest')
  inputs:
    command: 'pack'
    packagesToPack: '$(commonProject)'
    configuration: '$(buildConfiguration)'
    outputDir: '$(outputDir)'
    nobuild: true
    versioningScheme: byBuildNumber

###############################################
# BUILD & PACK: Foundation.Components
###############################################
- task: DotNetCoreCLI@2
  displayName: 'Build GCFoundation.Components'
  inputs:
    command: 'build'
    projects: '$(componentsProject)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: 'Pack GCFoundation.Components'
  condition: ne(variables['Build.Reason'], 'PullRequest')
  inputs:
    command: 'pack'
    packagesToPack: '$(componentsProject)'
    configuration: '$(buildConfiguration)'
    outputDir: '$(outputDir)'
    nobuild: true
    versioningScheme: byBuildNumber

###############################################
# BUILD & PACK: Foundation.Security
###############################################
- task: DotNetCoreCLI@2
  displayName: 'Build GCFoundation.Components'
  inputs:
    command: 'build'
    projects: '$(securityProject)'
    arguments: '--configuration $(buildConfiguration) --no-restore'


- task: DotNetCoreCLI@2
  displayName: 'Pack GCFoundation.Security'
  condition: ne(variables['Build.Reason'], 'PullRequest')
  inputs:
    command: 'pack'
    packagesToPack: '$(securityProject)'
    configuration: '$(buildConfiguration)'
    outputDir: '$(outputDir)'
    nobuild: true
    versioningScheme: byBuildNumber

###############################################
# PUSH TO AZURE ARTIFACTS
###############################################
- task: NuGetAuthenticate@1
  displayName: 'NuGet Authenticate'
  condition: ne(variables['Build.Reason'], 'PullRequest')

- task: NuGetCommand@2
  displayName: 'Push NuGet Packages to Azure Artifacts'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    command: 'push'
    publishVstsFeed: 'EGCS/EGCS-Nuget-Feed'
    searchPatternPush: '$(outputDir)/*.nupkg'
    allowPackageConflicts: true
