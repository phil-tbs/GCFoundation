using Foundation.Components.Enums;
using Microsoft.AspNetCore.Razor.TagHelpers;

namespace Foundation.Components.TagHelpers.GCDS
{
    /// <summary>
    /// A TagHelper that renders a GC Design System notice component as a <c>&lt;gcds-notice&gt;</c> element.
    /// The notice is used to display alerts with a title, type, and associated content. The component can be customized with different heading tags and alert types.
    /// </summary>
    [HtmlTargetElement("gcds-notice")]
    public class NoticeTagHelper : BaseTagHelper
    {
        /// <summary>
        /// Gets or sets the title of the notice. This is the main heading of the alert.
        /// </summary>
        public required string Title { get; set; }

        /// <summary>
        /// Gets or sets the HTML heading tag used for the title. Default is <see cref="HeadingTag.h2"/>.
        /// </summary>
        public HeadingTag TitleTag { get; set; } = HeadingTag.h2;

        /// <summary>
        /// Gets or sets the type of the alert. The default is <see cref="AlertType.Info"/>.
        /// </summary>
        public AlertType Type { get; set; } = AlertType.Info;

        /// <summary>
        /// Processes the <c>gcds-notice</c> element by adding the <c>notice-title</c>, <c>notice-title-tag</c>, <c>type</c>, and <c>lang</c> attributes
        /// to the rendered output, and sets the tag name to <c>gcds-notice</c>.
        /// </summary>
        /// <param name="context">The context for the tag helper.</param>
        /// <param name="output">The HTML element output generated by the tag helper.</param>
        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            ArgumentNullException.ThrowIfNull(output, nameof(output));
            output.TagName = "gcds-notice";

            AddAttributeIfNotNull(output, "notice-title", Title);

            AddAttributeIfNotNull(output, "notice-title-tag", TitleTag);
#pragma warning disable CA1308 // Normalize strings to uppercase
            AddAttributeIfNotNull(output, "type", Type.ToString().ToLowerInvariant());
#pragma warning restore CA1308 // Normalize strings to uppercase
#pragma warning disable CA1308 // Normalize strings to uppercase
            AddAttributeIfNotNull(output, "lang", Lang.ToString().ToLowerInvariant());
#pragma warning restore CA1308 // Normalize strings to uppercase

            base.Process(context, output);
        }
    }
}
